/* tslint:disable */
/* eslint-disable */
/**
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuditList,
  AuditRead,
  AuditUserRead,
  ListApiKey400Response,
} from '../models/index';
import {
    AuditListFromJSON,
    AuditListToJSON,
    AuditReadFromJSON,
    AuditReadToJSON,
    AuditUserReadFromJSON,
    AuditUserReadToJSON,
    ListApiKey400ResponseFromJSON,
    ListApiKey400ResponseToJSON,
} from '../models/index';

export interface DeleteAuditRequest {
    id: string;
}

export interface ListAuditRequest {
    page?: number;
    itemsPerPage?: number;
    sort?: string;
    id?: string;
    action?: string;
    author?: string;
}

export interface ReadAuditRequest {
    id: string;
}

export interface ReadAuditUserRequest {
    id: string;
}

/**
 * 
 */
export class AuditApi extends runtime.BaseAPI {

    /**
     * Deletes the Audit with the requested ID.
     * Deletes a Audit by ID
     */
    async deleteAuditRaw(requestParameters: DeleteAuditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAudit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/audits/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the Audit with the requested ID.
     * Deletes a Audit by ID
     */
    async deleteAudit(requestParameters: DeleteAuditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAuditRaw(requestParameters, initOverrides);
    }

    /**
     * List Audits.
     * List Audits
     */
    async listAuditRaw(requestParameters: ListAuditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AuditList>>> {
        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }

        if (requestParameters.author !== undefined) {
            queryParameters['author'] = requestParameters.author;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.page !== undefined && requestParameters.page !== null) {
            headerParameters['x-page'] = String(requestParameters.page);
        }

        if (requestParameters.itemsPerPage !== undefined && requestParameters.itemsPerPage !== null) {
            headerParameters['x-items-per-page'] = String(requestParameters.itemsPerPage);
        }

        const response = await this.request({
            path: `/audits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuditListFromJSON));
    }

    /**
     * List Audits.
     * List Audits
     */
    async listAudit(requestParameters: ListAuditRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AuditList>> {
        const response = await this.listAuditRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finds the Audit with the requested ID and returns it.
     * Find a Audit by ID
     */
    async readAuditRaw(requestParameters: ReadAuditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditRead>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling readAudit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/audits/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditReadFromJSON(jsonValue));
    }

    /**
     * Finds the Audit with the requested ID and returns it.
     * Find a Audit by ID
     */
    async readAudit(requestParameters: ReadAuditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditRead> {
        const response = await this.readAuditRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find the attached User of the Audit with the given ID
     * Find the attached User
     */
    async readAuditUserRaw(requestParameters: ReadAuditUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditUserRead>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling readAuditUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/audits/{id}/user`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditUserReadFromJSON(jsonValue));
    }

    /**
     * Find the attached User of the Audit with the given ID
     * Find the attached User
     */
    async readAuditUser(requestParameters: ReadAuditUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditUserRead> {
        const response = await this.readAuditUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
