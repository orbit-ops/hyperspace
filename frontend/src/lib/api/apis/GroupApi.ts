/* tslint:disable */
/* eslint-disable */
/**
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateGroupRequest,
  GroupCreate,
  GroupList,
  GroupRead,
  GroupUpdate,
  GroupUsersList,
  ListApiKey400Response,
  UpdateGroupRequest,
} from '../models/index';
import {
    CreateGroupRequestFromJSON,
    CreateGroupRequestToJSON,
    GroupCreateFromJSON,
    GroupCreateToJSON,
    GroupListFromJSON,
    GroupListToJSON,
    GroupReadFromJSON,
    GroupReadToJSON,
    GroupUpdateFromJSON,
    GroupUpdateToJSON,
    GroupUsersListFromJSON,
    GroupUsersListToJSON,
    ListApiKey400ResponseFromJSON,
    ListApiKey400ResponseToJSON,
    UpdateGroupRequestFromJSON,
    UpdateGroupRequestToJSON,
} from '../models/index';

export interface CreateGroupOperationRequest {
    createGroupRequest: CreateGroupRequest;
}

export interface DeleteGroupRequest {
    id: string;
}

export interface ListGroupRequest {
    page?: number;
    itemsPerPage?: number;
    sort?: string;
    id?: string;
    name?: string;
    scopes?: string;
    cidr?: string;
}

export interface ListGroupUsersRequest {
    id: string;
    page?: number;
    itemsPerPage?: number;
    sort?: string;
}

export interface ReadGroupRequest {
    id: string;
}

export interface UpdateGroupOperationRequest {
    id: string;
    updateGroupRequest: UpdateGroupRequest;
}

/**
 * 
 */
export class GroupApi extends runtime.BaseAPI {

    /**
     * Creates a new Group and persists it to storage.
     * Create a new Group
     */
    async createGroupRaw(requestParameters: CreateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupCreate>> {
        if (requestParameters.createGroupRequest === null || requestParameters.createGroupRequest === undefined) {
            throw new runtime.RequiredError('createGroupRequest','Required parameter requestParameters.createGroupRequest was null or undefined when calling createGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGroupRequestToJSON(requestParameters.createGroupRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupCreateFromJSON(jsonValue));
    }

    /**
     * Creates a new Group and persists it to storage.
     * Create a new Group
     */
    async createGroup(requestParameters: CreateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupCreate> {
        const response = await this.createGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the Group with the requested ID.
     * Deletes a Group by ID
     */
    async deleteGroupRaw(requestParameters: DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the Group with the requested ID.
     * Deletes a Group by ID
     */
    async deleteGroup(requestParameters: DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGroupRaw(requestParameters, initOverrides);
    }

    /**
     * List Groups.
     * List Groups
     */
    async listGroupRaw(requestParameters: ListGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupList>>> {
        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.scopes !== undefined) {
            queryParameters['scopes'] = requestParameters.scopes;
        }

        if (requestParameters.cidr !== undefined) {
            queryParameters['cidr'] = requestParameters.cidr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.page !== undefined && requestParameters.page !== null) {
            headerParameters['x-page'] = String(requestParameters.page);
        }

        if (requestParameters.itemsPerPage !== undefined && requestParameters.itemsPerPage !== null) {
            headerParameters['x-items-per-page'] = String(requestParameters.itemsPerPage);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupListFromJSON));
    }

    /**
     * List Groups.
     * List Groups
     */
    async listGroup(requestParameters: ListGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupList>> {
        const response = await this.listGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List attached Users.
     * List attached Users
     */
    async listGroupUsersRaw(requestParameters: ListGroupUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupUsersList>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listGroupUsers.');
        }

        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.page !== undefined && requestParameters.page !== null) {
            headerParameters['x-page'] = String(requestParameters.page);
        }

        if (requestParameters.itemsPerPage !== undefined && requestParameters.itemsPerPage !== null) {
            headerParameters['x-items-per-page'] = String(requestParameters.itemsPerPage);
        }

        const response = await this.request({
            path: `/groups/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupUsersListFromJSON));
    }

    /**
     * List attached Users.
     * List attached Users
     */
    async listGroupUsers(requestParameters: ListGroupUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupUsersList>> {
        const response = await this.listGroupUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finds the Group with the requested ID and returns it.
     * Find a Group by ID
     */
    async readGroupRaw(requestParameters: ReadGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupRead>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling readGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupReadFromJSON(jsonValue));
    }

    /**
     * Finds the Group with the requested ID and returns it.
     * Find a Group by ID
     */
    async readGroup(requestParameters: ReadGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupRead> {
        const response = await this.readGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Group and persists changes to storage.
     * Updates a Group
     */
    async updateGroupRaw(requestParameters: UpdateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupUpdate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateGroup.');
        }

        if (requestParameters.updateGroupRequest === null || requestParameters.updateGroupRequest === undefined) {
            throw new runtime.RequiredError('updateGroupRequest','Required parameter requestParameters.updateGroupRequest was null or undefined when calling updateGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGroupRequestToJSON(requestParameters.updateGroupRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupUpdateFromJSON(jsonValue));
    }

    /**
     * Updates a Group and persists changes to storage.
     * Updates a Group
     */
    async updateGroup(requestParameters: UpdateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupUpdate> {
        const response = await this.updateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
