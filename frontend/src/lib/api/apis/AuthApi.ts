/* tslint:disable */
/* eslint-disable */
/**
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Status200Response,
  UserpassLoginRequest,
} from '../models/index';
import {
    Status200ResponseFromJSON,
    Status200ResponseToJSON,
    UserpassLoginRequestFromJSON,
    UserpassLoginRequestToJSON,
} from '../models/index';

export interface GoogleAuthCallbackRequest {
    sAMLResponse: string;
    relayState: string;
}

export interface GoogleAuthStartRequest {
    after: string;
}

export interface UserpassLoginOperationRequest {
    userpassLoginRequest?: UserpassLoginRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async googleAuthCallbackRaw(requestParameters: GoogleAuthCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sAMLResponse === null || requestParameters.sAMLResponse === undefined) {
            throw new runtime.RequiredError('sAMLResponse','Required parameter requestParameters.sAMLResponse was null or undefined when calling googleAuthCallback.');
        }

        if (requestParameters.relayState === null || requestParameters.relayState === undefined) {
            throw new runtime.RequiredError('relayState','Required parameter requestParameters.relayState was null or undefined when calling googleAuthCallback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.sAMLResponse !== undefined) {
            formParams.append('SAMLResponse', requestParameters.sAMLResponse as any);
        }

        if (requestParameters.relayState !== undefined) {
            formParams.append('RelayState', requestParameters.relayState as any);
        }

        const response = await this.request({
            path: `/auth/google/callback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleAuthCallback(requestParameters: GoogleAuthCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleAuthCallbackRaw(requestParameters, initOverrides);
    }

    /**
     */
    async googleAuthStartRaw(requestParameters: GoogleAuthStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.after === null || requestParameters.after === undefined) {
            throw new runtime.RequiredError('after','Required parameter requestParameters.after was null or undefined when calling googleAuthStart.');
        }

        const queryParameters: any = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/google/start`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async googleAuthStart(requestParameters: GoogleAuthStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleAuthStartRaw(requestParameters, initOverrides);
    }

    /**
     * Synchronize users for the google provider
     */
    async googleAuthSyncRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/auth/google/sync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Synchronize users for the google provider
     */
    async googleAuthSync(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleAuthSyncRaw(initOverrides);
    }

    /**
     * Ping the database and report
     */
    async statusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Status200ResponseFromJSON(jsonValue));
    }

    /**
     * Ping the database and report
     */
    async status(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status200Response> {
        const response = await this.statusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login with a user and password
     */
    async userpassLoginRaw(requestParameters: UserpassLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/userpass/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserpassLoginRequestToJSON(requestParameters.userpassLoginRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Login with a user and password
     */
    async userpassLogin(requestParameters: UserpassLoginOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userpassLoginRaw(requestParameters, initOverrides);
    }

}
