/* tslint:disable */
/* eslint-disable */
/**
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDeviceRequest,
  DeviceCreate,
  DeviceList,
  DeviceRead,
  DeviceUpdate,
  DeviceUserRead,
  ListApiKey400Response,
  UpdateDeviceRequest,
} from '../models/index';
import {
    CreateDeviceRequestFromJSON,
    CreateDeviceRequestToJSON,
    DeviceCreateFromJSON,
    DeviceCreateToJSON,
    DeviceListFromJSON,
    DeviceListToJSON,
    DeviceReadFromJSON,
    DeviceReadToJSON,
    DeviceUpdateFromJSON,
    DeviceUpdateToJSON,
    DeviceUserReadFromJSON,
    DeviceUserReadToJSON,
    ListApiKey400ResponseFromJSON,
    ListApiKey400ResponseToJSON,
    UpdateDeviceRequestFromJSON,
    UpdateDeviceRequestToJSON,
} from '../models/index';

export interface CreateDeviceOperationRequest {
    createDeviceRequest: CreateDeviceRequest;
}

export interface DeleteDeviceRequest {
    id: string;
}

export interface ListDeviceRequest {
    page?: number;
    itemsPerPage?: number;
    sort?: string;
    id?: string;
    user?: string;
    name?: string;
    type?: string;
    endpoint?: string;
    allowedIps?: string;
    publicKey?: string;
}

export interface ReadDeviceRequest {
    id: string;
}

export interface ReadDeviceUserRequest {
    id: string;
}

export interface UpdateDeviceOperationRequest {
    id: string;
    updateDeviceRequest: UpdateDeviceRequest;
}

/**
 * 
 */
export class DeviceApi extends runtime.BaseAPI {

    /**
     * Creates a new Device and persists it to storage.
     * Create a new Device
     */
    async createDeviceRaw(requestParameters: CreateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceCreate>> {
        if (requestParameters.createDeviceRequest === null || requestParameters.createDeviceRequest === undefined) {
            throw new runtime.RequiredError('createDeviceRequest','Required parameter requestParameters.createDeviceRequest was null or undefined when calling createDevice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/devices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeviceRequestToJSON(requestParameters.createDeviceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceCreateFromJSON(jsonValue));
    }

    /**
     * Creates a new Device and persists it to storage.
     * Create a new Device
     */
    async createDevice(requestParameters: CreateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceCreate> {
        const response = await this.createDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the Device with the requested ID.
     * Deletes a Device by ID
     */
    async deleteDeviceRaw(requestParameters: DeleteDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDevice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/devices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the Device with the requested ID.
     * Deletes a Device by ID
     */
    async deleteDevice(requestParameters: DeleteDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDeviceRaw(requestParameters, initOverrides);
    }

    /**
     * List Devices.
     * List Devices
     */
    async listDeviceRaw(requestParameters: ListDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DeviceList>>> {
        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.user !== undefined) {
            queryParameters['user'] = requestParameters.user;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.endpoint !== undefined) {
            queryParameters['endpoint'] = requestParameters.endpoint;
        }

        if (requestParameters.allowedIps !== undefined) {
            queryParameters['allowed_ips'] = requestParameters.allowedIps;
        }

        if (requestParameters.publicKey !== undefined) {
            queryParameters['public_key'] = requestParameters.publicKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.page !== undefined && requestParameters.page !== null) {
            headerParameters['x-page'] = String(requestParameters.page);
        }

        if (requestParameters.itemsPerPage !== undefined && requestParameters.itemsPerPage !== null) {
            headerParameters['x-items-per-page'] = String(requestParameters.itemsPerPage);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/devices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeviceListFromJSON));
    }

    /**
     * List Devices.
     * List Devices
     */
    async listDevice(requestParameters: ListDeviceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DeviceList>> {
        const response = await this.listDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finds the Device with the requested ID and returns it.
     * Find a Device by ID
     */
    async readDeviceRaw(requestParameters: ReadDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceRead>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling readDevice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/devices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceReadFromJSON(jsonValue));
    }

    /**
     * Finds the Device with the requested ID and returns it.
     * Find a Device by ID
     */
    async readDevice(requestParameters: ReadDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceRead> {
        const response = await this.readDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find the attached User of the Device with the given ID
     * Find the attached User
     */
    async readDeviceUserRaw(requestParameters: ReadDeviceUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceUserRead>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling readDeviceUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/devices/{id}/user`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceUserReadFromJSON(jsonValue));
    }

    /**
     * Find the attached User of the Device with the given ID
     * Find the attached User
     */
    async readDeviceUser(requestParameters: ReadDeviceUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceUserRead> {
        const response = await this.readDeviceUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Device and persists changes to storage.
     * Updates a Device
     */
    async updateDeviceRaw(requestParameters: UpdateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceUpdate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDevice.');
        }

        if (requestParameters.updateDeviceRequest === null || requestParameters.updateDeviceRequest === undefined) {
            throw new runtime.RequiredError('updateDeviceRequest','Required parameter requestParameters.updateDeviceRequest was null or undefined when calling updateDevice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/devices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDeviceRequestToJSON(requestParameters.updateDeviceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceUpdateFromJSON(jsonValue));
    }

    /**
     * Updates a Device and persists changes to storage.
     * Updates a Device
     */
    async updateDevice(requestParameters: UpdateDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceUpdate> {
        const response = await this.updateDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
