/* tslint:disable */
/* eslint-disable */
/**
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiKeyCreate,
  ApiKeyList,
  ApiKeyRead,
  ApiKeyUserRead,
  CreateApiKeyRequest,
  ListApiKey400Response,
} from '../models/index';
import {
    ApiKeyCreateFromJSON,
    ApiKeyCreateToJSON,
    ApiKeyListFromJSON,
    ApiKeyListToJSON,
    ApiKeyReadFromJSON,
    ApiKeyReadToJSON,
    ApiKeyUserReadFromJSON,
    ApiKeyUserReadToJSON,
    CreateApiKeyRequestFromJSON,
    CreateApiKeyRequestToJSON,
    ListApiKey400ResponseFromJSON,
    ListApiKey400ResponseToJSON,
} from '../models/index';

export interface CreateApiKeyOperationRequest {
    createApiKeyRequest: CreateApiKeyRequest;
}

export interface DeleteApiKeyRequest {
    id: number;
}

export interface ListApiKeyRequest {
    page?: number;
    itemsPerPage?: number;
    sort?: string;
    filter?: string;
}

export interface ReadApiKeyRequest {
    id: number;
}

export interface ReadApiKeyUserRequest {
    id: number;
}

/**
 * 
 */
export class ApiKeyApi extends runtime.BaseAPI {

    /**
     * Creates a new ApiKey and persists it to storage.
     * Create a new ApiKey
     */
    async createApiKeyRaw(requestParameters: CreateApiKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyCreate>> {
        if (requestParameters.createApiKeyRequest === null || requestParameters.createApiKeyRequest === undefined) {
            throw new runtime.RequiredError('createApiKeyRequest','Required parameter requestParameters.createApiKeyRequest was null or undefined when calling createApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApiKeyRequestToJSON(requestParameters.createApiKeyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyCreateFromJSON(jsonValue));
    }

    /**
     * Creates a new ApiKey and persists it to storage.
     * Create a new ApiKey
     */
    async createApiKey(requestParameters: CreateApiKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyCreate> {
        const response = await this.createApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the ApiKey with the requested ID.
     * Deletes a ApiKey by ID
     */
    async deleteApiKeyRaw(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the ApiKey with the requested ID.
     * Deletes a ApiKey by ID
     */
    async deleteApiKey(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiKeyRaw(requestParameters, initOverrides);
    }

    /**
     * List ApiKeys.
     * List ApiKeys
     */
    async listApiKeyRaw(requestParameters: ListApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiKeyList>>> {
        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.page !== undefined && requestParameters.page !== null) {
            headerParameters['x-page'] = String(requestParameters.page);
        }

        if (requestParameters.itemsPerPage !== undefined && requestParameters.itemsPerPage !== null) {
            headerParameters['x-items-per-page'] = String(requestParameters.itemsPerPage);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiKeyListFromJSON));
    }

    /**
     * List ApiKeys.
     * List ApiKeys
     */
    async listApiKey(requestParameters: ListApiKeyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiKeyList>> {
        const response = await this.listApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finds the ApiKey with the requested ID and returns it.
     * Find a ApiKey by ID
     */
    async readApiKeyRaw(requestParameters: ReadApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyRead>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling readApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyReadFromJSON(jsonValue));
    }

    /**
     * Finds the ApiKey with the requested ID and returns it.
     * Find a ApiKey by ID
     */
    async readApiKey(requestParameters: ReadApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyRead> {
        const response = await this.readApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find the attached User of the ApiKey with the given ID
     * Find the attached User
     */
    async readApiKeyUserRaw(requestParameters: ReadApiKeyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyUserRead>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling readApiKeyUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys/{id}/user`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyUserReadFromJSON(jsonValue));
    }

    /**
     * Find the attached User of the ApiKey with the given ID
     * Find the attached User
     */
    async readApiKeyUser(requestParameters: ReadApiKeyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyUserRead> {
        const response = await this.readApiKeyUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
