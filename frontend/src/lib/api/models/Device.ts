/* tslint:disable */
/* eslint-disable */
/**
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    type: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Device
     */
    dns: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    publicKey: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    presharedKey: string;
    /**
     * 
     * @type {boolean}
     * @memberof Device
     */
    keepAlive: boolean;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    endpoint: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Device
     */
    allowedIps: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    userId: string;
    /**
     * 
     * @type {User}
     * @memberof Device
     */
    user: User;
}

/**
 * Check if a given object implements the Device interface.
 */
export function instanceOfDevice(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "dns" in value;
    isInstance = isInstance && "publicKey" in value;
    isInstance = isInstance && "presharedKey" in value;
    isInstance = isInstance && "keepAlive" in value;
    isInstance = isInstance && "endpoint" in value;
    isInstance = isInstance && "allowedIps" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "user" in value;

    return isInstance;
}

export function DeviceFromJSON(json: any): Device {
    return DeviceFromJSONTyped(json, false);
}

export function DeviceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Device {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': json['type'],
        'dns': json['dns'],
        'publicKey': json['public_key'],
        'presharedKey': json['preshared_key'],
        'keepAlive': json['keep_alive'],
        'endpoint': json['endpoint'],
        'allowedIps': json['allowed_ips'],
        'userId': json['user_id'],
        'user': UserFromJSON(json['user']),
    };
}

export function DeviceToJSON(value?: Device | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'type': value.type,
        'dns': value.dns,
        'public_key': value.publicKey,
        'preshared_key': value.presharedKey,
        'keep_alive': value.keepAlive,
        'endpoint': value.endpoint,
        'allowed_ips': value.allowedIps,
        'user_id': value.userId,
        'user': UserToJSON(value.user),
    };
}

