/* tslint:disable */
/* eslint-disable */
/**
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface ApiKey
 */
export interface ApiKey {
    /**
     * 
     * @type {number}
     * @memberof ApiKey
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ApiKey
     */
    key: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiKey
     */
    scopes: Array<ApiKeyScopesEnum>;
    /**
     * 
     * @type {User}
     * @memberof ApiKey
     */
    user: User;
}


/**
 * @export
 */
export const ApiKeyScopesEnum = {
    User: 'user.*',
    Admin: 'admin.*'
} as const;
export type ApiKeyScopesEnum = typeof ApiKeyScopesEnum[keyof typeof ApiKeyScopesEnum];


/**
 * Check if a given object implements the ApiKey interface.
 */
export function instanceOfApiKey(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "key" in value;
    isInstance = isInstance && "scopes" in value;
    isInstance = isInstance && "user" in value;

    return isInstance;
}

export function ApiKeyFromJSON(json: any): ApiKey {
    return ApiKeyFromJSONTyped(json, false);
}

export function ApiKeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiKey {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'key': json['key'],
        'scopes': json['scopes'],
        'user': UserFromJSON(json['user']),
    };
}

export function ApiKeyToJSON(value?: ApiKey | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'key': value.key,
        'scopes': value.scopes,
        'user': UserToJSON(value.user),
    };
}

