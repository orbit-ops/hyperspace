// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// APIKeysColumns holds the columns for the "api_keys" table.
	APIKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "key", Type: field.TypeString},
		{Name: "scopes", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "varchar"}},
		{Name: "user_keys", Type: field.TypeString},
	}
	// APIKeysTable holds the schema information for the "api_keys" table.
	APIKeysTable = &schema.Table{
		Name:       "api_keys",
		Columns:    APIKeysColumns,
		PrimaryKey: []*schema.Column{APIKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_keys_users_keys",
				Columns:    []*schema.Column{APIKeysColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AuditsColumns holds the columns for the "audits" table.
	AuditsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "action", Type: field.TypeString},
		{Name: "author", Type: field.TypeString},
		{Name: "user_audit", Type: field.TypeString},
	}
	// AuditsTable holds the schema information for the "audits" table.
	AuditsTable = &schema.Table{
		Name:       "audits",
		Columns:    AuditsColumns,
		PrimaryKey: []*schema.Column{AuditsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "audits_users_audit",
				Columns:    []*schema.Column{AuditsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DevicesColumns holds the columns for the "devices" table.
	DevicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeString},
		{Name: "dns", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "varchar"}},
		{Name: "public_key", Type: field.TypeString, Unique: true},
		{Name: "preshared_key", Type: field.TypeString, Unique: true},
		{Name: "keep_alive", Type: field.TypeBool},
		{Name: "endpoint", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"postgres": "inet"}},
		{Name: "allowed_ips", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "varchar"}},
		{Name: "user_devices", Type: field.TypeString},
	}
	// DevicesTable holds the schema information for the "devices" table.
	DevicesTable = &schema.Table{
		Name:       "devices",
		Columns:    DevicesColumns,
		PrimaryKey: []*schema.Column{DevicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "devices_users_devices",
				Columns:    []*schema.Column{DevicesColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "scopes", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "varchar"}},
		{Name: "cidr", Type: field.TypeString, SchemaType: map[string]string{"postgres": "cidr"}},
		{Name: "rules", Type: field.TypeJSON},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "firstname", Type: field.TypeString},
		{Name: "lastname", Type: field.TypeString},
		{Name: "provider", Type: field.TypeString},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "salt", Type: field.TypeString, Nullable: true},
		{Name: "photo_url", Type: field.TypeString, Nullable: true},
		{Name: "disabled", Type: field.TypeBool, Default: false},
		{Name: "disabled_reason", Type: field.TypeString, Nullable: true},
		{Name: "group_users", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_groups_users",
				Columns:    []*schema.Column{UsersColumns[10]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		APIKeysTable,
		AuditsTable,
		DevicesTable,
		GroupsTable,
		UsersTable,
	}
)

func init() {
	APIKeysTable.ForeignKeys[0].RefTable = UsersTable
	AuditsTable.ForeignKeys[0].RefTable = UsersTable
	DevicesTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = GroupsTable
}
