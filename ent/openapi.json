{
  "openapi": "3.0.3",
  "info": {
    "title": "Ent Schema API",
    "description": "This is an auto generated API description made out of an Ent schema definition",
    "version": "0.1.0"
  },
  "paths": {
    "/api-keys": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "List ApiKeys",
        "description": "List ApiKeys.",
        "operationId": "listApiKey",
        "parameters": [
          {
            "name": "x-page",
            "in": "header",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "x-items-per-page",
            "in": "header",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result ApiKey list",
            "headers": {
              "x-total": {
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Create a new ApiKey",
        "description": "Creates a new ApiKey and persists it to storage.",
        "operationId": "createApiKey",
        "requestBody": {
          "description": "ApiKey to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "user.*",
                        "admin.*"
                      ]
                    }
                  },
                  "user": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "key",
                  "scopes",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "ApiKey created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api-keys/{id}": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Find a ApiKey by ID",
        "description": "Finds the ApiKey with the requested ID and returns it.",
        "operationId": "readApiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKey",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ApiKey with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Deletes a ApiKey by ID",
        "description": "Deletes the ApiKey with the requested ID.",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKey",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ApiKey with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api-keys/{id}/user": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the ApiKey with the given ID",
        "operationId": "readApiKeyUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKey",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to ApiKey with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/audits": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "List Audits",
        "description": "List Audits.",
        "operationId": "listAudit",
        "parameters": [
          {
            "name": "x-page",
            "in": "header",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "x-items-per-page",
            "in": "header",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "author",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Audit list",
            "headers": {
              "x-total": {
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/audits/{id}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Find a Audit by ID",
        "description": "Finds the Audit with the requested ID and returns it.",
        "operationId": "readAudit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Audit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Audit"
        ],
        "summary": "Deletes a Audit by ID",
        "description": "Deletes the Audit with the requested ID.",
        "operationId": "deleteAudit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Audit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Audit with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/audits/{id}/user": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Audit with the given ID",
        "operationId": "readAuditUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Audit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Audit with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audit_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/google/callback": {
      "description": "Callback endpoint for google SAML login process",
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "googleAuthCallback",
        "requestBody": {
          "description": "Username and password to login",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "SAMLResponse": {
                    "type": "string"
                  },
                  "RelayState": {
                    "type": "string"
                  }
                },
                "required": [
                  "SAMLResponse",
                  "RelayState"
                ]
              }
            }
          }
        },
        "responses": {
          "301": {
            "description": "Authentication Successful",
            "headers": {
              "Location": {
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "Set-Cookie": {
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Login unsuccessful"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/google/start": {
      "description": "Start SAML login via Google provider",
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "googleAuthStart",
        "responses": {
          "301": {
            "description": "Starting Authentication",
            "headers": {
              "Location": {
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/auth/google/sync": {
      "description": "Synchronize users with google workspace",
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Synchronize users for the google provider",
        "operationId": "googleAuthSync",
        "responses": {
          "200": {
            "description": "Authentication Successful"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "CookieAuth": []
          }
        ]
      }
    },
    "/auth/userpass/login": {
      "description": "Login using username and password combination",
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login with a user and password",
        "operationId": "userpassLogin",
        "requestBody": {
          "description": "Username and password to login",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication Successful",
            "headers": {
              "Set-Cookie": {
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Username/Password combination incorrect"
          }
        }
      }
    },
    "/devices": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "List Devices",
        "description": "List Devices.",
        "operationId": "listDevice",
        "parameters": [
          {
            "name": "x-page",
            "in": "header",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "x-items-per-page",
            "in": "header",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endpoint",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowed_ips",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "public_key",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Device list",
            "headers": {
              "x-total": {
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "CookieAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Device"
        ],
        "summary": "Create a new Device",
        "description": "Creates a new Device and persists it to storage.",
        "operationId": "createDevice",
        "requestBody": {
          "description": "Device to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "dns": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "public_key": {
                    "type": "string"
                  },
                  "keep_alive": {
                    "type": "boolean"
                  },
                  "endpoint": {
                    "type": "string"
                  },
                  "allowed_ips": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "user": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type",
                  "dns",
                  "public_key",
                  "keep_alive",
                  "endpoint",
                  "allowed_ips",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Device created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "CookieAuth": []
          }
        ]
      }
    },
    "/devices/{id}": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Find a Device by ID",
        "description": "Finds the Device with the requested ID and returns it.",
        "operationId": "readDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Device",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "CookieAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Device"
        ],
        "summary": "Deletes a Device by ID",
        "description": "Deletes the Device with the requested ID.",
        "operationId": "deleteDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Device",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Device with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "CookieAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Device"
        ],
        "summary": "Updates a Device",
        "description": "Updates a Device and persists changes to storage.",
        "operationId": "updateDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Device",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Device properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "dns": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "keep_alive": {
                    "type": "boolean"
                  },
                  "endpoint": {
                    "type": "string"
                  },
                  "allowed_ips": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "user": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Device updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/devices/{id}/user": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Device with the given ID",
        "operationId": "readDeviceUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Device",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Device with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List Groups",
        "description": "List Groups.",
        "operationId": "listGroup",
        "parameters": [
          {
            "name": "x-page",
            "in": "header",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "x-items-per-page",
            "in": "header",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopes",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidr",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Group list",
            "headers": {
              "x-total": {
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "CookieAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Create a new Group",
        "description": "Creates a new Group and persists it to storage.",
        "operationId": "createGroup",
        "requestBody": {
          "description": "Group to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "admin.users.write",
                        "admin.users.readonly",
                        "admin.groups.write",
                        "admin.groups.readonly",
                        "admin.devices.write",
                        "admin.devices.readonly",
                        "admin.settings.write",
                        "admin.settings.readonly",
                        "admin.*",
                        "user.devices.write",
                        "user.apikey.write",
                        "user.devices.readonly",
                        "user.*"
                      ]
                    }
                  },
                  "cidr": {
                    "type": "string"
                  },
                  "rules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "target": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "allow",
                            "deny"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "target"
                      ]
                    }
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "scopes",
                  "cidr",
                  "rules"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "CookieAuth": []
          }
        ]
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Find a Group by ID",
        "description": "Finds the Group with the requested ID and returns it.",
        "operationId": "readGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "CookieAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Deletes a Group by ID",
        "description": "Deletes the Group with the requested ID.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "CookieAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Group"
        ],
        "summary": "Updates a Group",
        "description": "Updates a Group and persists changes to storage.",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Group properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "admin.users.write",
                        "admin.users.readonly",
                        "admin.groups.write",
                        "admin.groups.readonly",
                        "admin.devices.write",
                        "admin.devices.readonly",
                        "admin.settings.write",
                        "admin.settings.readonly",
                        "admin.*",
                        "user.devices.write",
                        "user.apikey.write",
                        "user.devices.readonly",
                        "user.*"
                      ]
                    }
                  },
                  "cidr": {
                    "type": "string"
                  },
                  "rules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "target": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "allow",
                            "deny"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "target"
                      ]
                    }
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/users": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List attached Users",
        "description": "List attached Users.",
        "operationId": "listGroupUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-page",
            "in": "header",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "x-items-per-page",
            "in": "header",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Groups list",
            "headers": {
              "x-total": {
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group_UsersList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/logout": {
      "description": "Logout",
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "logout",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "Logout successful",
            "headers": {
              "Set-Cookie": {
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthorized"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "CookieAuth": []
          }
        ]
      }
    },
    "/status": {
      "description": "Check auth status",
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Check authentication status",
        "operationId": "status",
        "responses": {
          "200": {
            "description": "User is valid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "photo_url": {
                      "type": "string"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "lastname": {
                      "type": "string"
                    },
                    "firstname": {
                      "type": "string"
                    },
                    "group": {
                      "type": "string"
                    },
                    "scopes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "admin.users.write",
                          "admin.users.readonly",
                          "admin.groups.write",
                          "admin.groups.readonly",
                          "admin.devices.write",
                          "admin.devices.readonly",
                          "admin.settings.write",
                          "admin.settings.readonly",
                          "admin.*",
                          "user.devices.write",
                          "user.apikey.write",
                          "user.devices.readonly",
                          "user.*"
                        ]
                      }
                    }
                  },
                  "required": [
                    "id",
                    "photo_url",
                    "provider",
                    "email",
                    "lastname",
                    "firstname",
                    "group",
                    "scopes"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User is unauthorized"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "CookieAuth": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "List Users.",
        "operationId": "listUser",
        "parameters": [
          {
            "name": "x-page",
            "in": "header",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "x-items-per-page",
            "in": "header",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstname",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastname",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disabled",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disabled_reason",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result User list",
            "headers": {
              "x-total": {
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new User",
        "description": "Creates a new User and persists it to storage.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "firstname": {
                    "type": "string"
                  },
                  "lastname": {
                    "type": "string"
                  },
                  "provider": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "salt": {
                    "type": "string"
                  },
                  "photo_url": {
                    "type": "string"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "disabled_reason": {
                    "type": "string"
                  },
                  "group": {
                    "type": "string"
                  },
                  "devices": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "audit": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "email",
                  "firstname",
                  "lastname",
                  "provider",
                  "disabled",
                  "group"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a User by ID",
        "description": "Finds the User with the requested ID and returns it.",
        "operationId": "readUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a User by ID",
        "description": "Deletes the User with the requested ID.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Updates a User",
        "description": "Updates a User and persists changes to storage.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "firstname": {
                    "type": "string"
                  },
                  "lastname": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "salt": {
                    "type": "string"
                  },
                  "photo_url": {
                    "type": "string"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "disabled_reason": {
                    "type": "string"
                  },
                  "group": {
                    "type": "string"
                  },
                  "devices": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "audit": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/audit": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Audits",
        "description": "List attached Audits.",
        "operationId": "listUserAudit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-page",
            "in": "header",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "x-items-per-page",
            "in": "header",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "headers": {
              "x-total": {
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_AuditList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/devices": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Devices",
        "description": "List attached Devices.",
        "operationId": "listUserDevices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-page",
            "in": "header",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "x-items-per-page",
            "in": "header",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "headers": {
              "x-total": {
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_DevicesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/group": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find the attached Group",
        "description": "Find the attached Group of the User with the given ID",
        "operationId": "readUserGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group attached to User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_GroupRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/keys": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Keys",
        "description": "List attached Keys.",
        "operationId": "listUserKeys",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-page",
            "in": "header",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "x-items-per-page",
            "in": "header",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "headers": {
              "x-total": {
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_KeysList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "user.*",
                "admin.*"
              ]
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "name",
          "key",
          "scopes",
          "user"
        ]
      },
      "ApiKeyCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "user.*",
                "admin.*"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "scopes"
        ]
      },
      "ApiKeyList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "user.*",
                "admin.*"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "scopes"
        ]
      },
      "ApiKeyRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "user.*",
                "admin.*"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "scopes"
        ]
      },
      "ApiKey_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "photo_url": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "disabled_reason": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "firstname",
          "lastname",
          "provider",
          "disabled"
        ]
      },
      "Audit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "action",
          "author",
          "user"
        ]
      },
      "AuditList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "author": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "action",
          "author"
        ]
      },
      "AuditRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "author": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "action",
          "author"
        ]
      },
      "Audit_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "photo_url": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "disabled_reason": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "firstname",
          "lastname",
          "provider",
          "disabled"
        ]
      },
      "Device": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "dns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "public_key": {
            "type": "string"
          },
          "preshared_key": {
            "type": "string"
          },
          "keep_alive": {
            "type": "boolean"
          },
          "endpoint": {
            "type": "string"
          },
          "allowed_ips": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "dns",
          "public_key",
          "preshared_key",
          "keep_alive",
          "endpoint",
          "allowed_ips",
          "user"
        ]
      },
      "DeviceCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "dns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "public_key": {
            "type": "string"
          },
          "preshared_key": {
            "type": "string"
          },
          "keep_alive": {
            "type": "boolean"
          },
          "endpoint": {
            "type": "string"
          },
          "allowed_ips": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "dns",
          "public_key",
          "preshared_key",
          "keep_alive",
          "endpoint",
          "allowed_ips"
        ]
      },
      "DeviceList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "dns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "public_key": {
            "type": "string"
          },
          "keep_alive": {
            "type": "boolean"
          },
          "endpoint": {
            "type": "string"
          },
          "allowed_ips": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "dns",
          "public_key",
          "keep_alive",
          "endpoint",
          "allowed_ips"
        ]
      },
      "DeviceRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "dns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "public_key": {
            "type": "string"
          },
          "keep_alive": {
            "type": "boolean"
          },
          "endpoint": {
            "type": "string"
          },
          "allowed_ips": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "dns",
          "public_key",
          "keep_alive",
          "endpoint",
          "allowed_ips"
        ]
      },
      "DeviceUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "dns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "public_key": {
            "type": "string"
          },
          "keep_alive": {
            "type": "boolean"
          },
          "endpoint": {
            "type": "string"
          },
          "allowed_ips": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "dns",
          "public_key",
          "keep_alive",
          "endpoint",
          "allowed_ips"
        ]
      },
      "Device_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "photo_url": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "disabled_reason": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "firstname",
          "lastname",
          "provider",
          "disabled"
        ]
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "admin.users.write",
                "admin.users.readonly",
                "admin.groups.write",
                "admin.groups.readonly",
                "admin.devices.write",
                "admin.devices.readonly",
                "admin.settings.write",
                "admin.settings.readonly",
                "admin.*",
                "user.devices.write",
                "user.apikey.write",
                "user.devices.readonly",
                "user.*"
              ]
            }
          },
          "cidr": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "target": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "allow",
                    "deny"
                  ]
                }
              },
              "required": [
                "type",
                "target"
              ]
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "required": [
          "id",
          "name",
          "scopes",
          "cidr",
          "rules"
        ]
      },
      "GroupCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "admin.users.write",
                "admin.users.readonly",
                "admin.groups.write",
                "admin.groups.readonly",
                "admin.devices.write",
                "admin.devices.readonly",
                "admin.settings.write",
                "admin.settings.readonly",
                "admin.*",
                "user.devices.write",
                "user.apikey.write",
                "user.devices.readonly",
                "user.*"
              ]
            }
          },
          "cidr": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "target": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "allow",
                    "deny"
                  ]
                }
              },
              "required": [
                "type",
                "target"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "scopes",
          "cidr",
          "rules"
        ]
      },
      "GroupList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "admin.users.write",
                "admin.users.readonly",
                "admin.groups.write",
                "admin.groups.readonly",
                "admin.devices.write",
                "admin.devices.readonly",
                "admin.settings.write",
                "admin.settings.readonly",
                "admin.*",
                "user.devices.write",
                "user.apikey.write",
                "user.devices.readonly",
                "user.*"
              ]
            }
          },
          "cidr": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "target": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "allow",
                    "deny"
                  ]
                }
              },
              "required": [
                "type",
                "target"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "scopes",
          "cidr",
          "rules"
        ]
      },
      "GroupRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "admin.users.write",
                "admin.users.readonly",
                "admin.groups.write",
                "admin.groups.readonly",
                "admin.devices.write",
                "admin.devices.readonly",
                "admin.settings.write",
                "admin.settings.readonly",
                "admin.*",
                "user.devices.write",
                "user.apikey.write",
                "user.devices.readonly",
                "user.*"
              ]
            }
          },
          "cidr": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "target": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "allow",
                    "deny"
                  ]
                }
              },
              "required": [
                "type",
                "target"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "scopes",
          "cidr",
          "rules"
        ]
      },
      "GroupUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "admin.users.write",
                "admin.users.readonly",
                "admin.groups.write",
                "admin.groups.readonly",
                "admin.devices.write",
                "admin.devices.readonly",
                "admin.settings.write",
                "admin.settings.readonly",
                "admin.*",
                "user.devices.write",
                "user.apikey.write",
                "user.devices.readonly",
                "user.*"
              ]
            }
          },
          "cidr": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "target": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "allow",
                    "deny"
                  ]
                }
              },
              "required": [
                "type",
                "target"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "scopes",
          "cidr",
          "rules"
        ]
      },
      "Group_UsersList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "photo_url": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "disabled_reason": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "firstname",
          "lastname",
          "provider",
          "disabled"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "photo_url": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "disabled_reason": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKey"
            }
          },
          "audit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Audit"
            }
          }
        },
        "required": [
          "id",
          "email",
          "firstname",
          "lastname",
          "provider",
          "disabled",
          "group"
        ]
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "photo_url": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "disabled_reason": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "firstname",
          "lastname",
          "provider",
          "disabled"
        ]
      },
      "UserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "photo_url": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "disabled_reason": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "firstname",
          "lastname",
          "provider",
          "disabled"
        ]
      },
      "UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "photo_url": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "disabled_reason": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "firstname",
          "lastname",
          "provider",
          "disabled"
        ]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "photo_url": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "disabled_reason": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "firstname",
          "lastname",
          "provider",
          "disabled"
        ]
      },
      "User_AuditList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "author": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "action",
          "author"
        ]
      },
      "User_DevicesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "dns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "public_key": {
            "type": "string"
          },
          "keep_alive": {
            "type": "boolean"
          },
          "endpoint": {
            "type": "string"
          },
          "allowed_ips": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "dns",
          "public_key",
          "keep_alive",
          "endpoint",
          "allowed_ips"
        ]
      },
      "User_GroupRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "admin.users.write",
                "admin.users.readonly",
                "admin.groups.write",
                "admin.groups.readonly",
                "admin.devices.write",
                "admin.devices.readonly",
                "admin.settings.write",
                "admin.settings.readonly",
                "admin.*",
                "user.devices.write",
                "user.apikey.write",
                "user.devices.readonly",
                "user.*"
              ]
            }
          },
          "cidr": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "target": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "allow",
                    "deny"
                  ]
                }
              },
              "required": [
                "type",
                "target"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "scopes",
          "cidr",
          "rules"
        ]
      },
      "User_KeysList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "user.*",
                "admin.*"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "scopes"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      },
      "CookieAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "cookie"
      }
    }
  }
}