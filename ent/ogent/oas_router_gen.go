// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"
				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pi-keys"
					if l := len("pi-keys"); len(elem) >= l && elem[0:l] == "pi-keys" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListApiKeyRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateApiKeyRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteApiKeyRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleReadApiKeyRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/user"
							if l := len("/user"); len(elem) >= l && elem[0:l] == "/user" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadApiKeyUserRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				case 'u': // Prefix: "u"
					if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'd': // Prefix: "dits"
						if l := len("dits"); len(elem) >= l && elem[0:l] == "dits" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListAuditRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteAuditRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleReadAuditRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/user"
								if l := len("/user"); len(elem) >= l && elem[0:l] == "/user" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadAuditUserRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					case 't': // Prefix: "th/"
						if l := len("th/"); len(elem) >= l && elem[0:l] == "th/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'g': // Prefix: "google/"
							if l := len("google/"); len(elem) >= l && elem[0:l] == "google/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "callback"
								if l := len("callback"); len(elem) >= l && elem[0:l] == "callback" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleGoogleAuthCallbackRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							case 's': // Prefix: "s"
								if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 't': // Prefix: "tart"
									if l := len("tart"); len(elem) >= l && elem[0:l] == "tart" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGoogleAuthStartRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'y': // Prefix: "ync"
									if l := len("ync"); len(elem) >= l && elem[0:l] == "ync" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGoogleAuthSyncRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						case 'u': // Prefix: "userpass/login"
							if l := len("userpass/login"); len(elem) >= l && elem[0:l] == "userpass/login" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleUserpassLoginRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					}
				}
			case 'd': // Prefix: "devices"
				if l := len("devices"); len(elem) >= l && elem[0:l] == "devices" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListDeviceRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateDeviceRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteDeviceRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleReadDeviceRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateDeviceRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/user"
						if l := len("/user"); len(elem) >= l && elem[0:l] == "/user" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleReadDeviceUserRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListGroupRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateGroupRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleReadGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/users"
						if l := len("/users"); len(elem) >= l && elem[0:l] == "/users" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleListGroupUsersRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'l': // Prefix: "logout"
				if l := len("logout"); len(elem) >= l && elem[0:l] == "logout" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleLogoutRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 's': // Prefix: "status"
				if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleStatusRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListUserRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateUserRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteUserRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleReadUserRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateUserRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "audit"
							if l := len("audit"); len(elem) >= l && elem[0:l] == "audit" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListUserAuditRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'd': // Prefix: "devices"
							if l := len("devices"); len(elem) >= l && elem[0:l] == "devices" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListUserDevicesRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'g': // Prefix: "group"
							if l := len("group"); len(elem) >= l && elem[0:l] == "group" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadUserGroupRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'k': // Prefix: "keys"
							if l := len("keys"); len(elem) >= l && elem[0:l] == "keys" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListUserKeysRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"
				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pi-keys"
					if l := len("pi-keys"); len(elem) >= l && elem[0:l] == "pi-keys" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListApiKey"
							r.summary = "List ApiKeys"
							r.operationID = "listApiKey"
							r.pathPattern = "/api-keys"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateApiKey"
							r.summary = "Create a new ApiKey"
							r.operationID = "createApiKey"
							r.pathPattern = "/api-keys"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteApiKey"
								r.summary = "Deletes a ApiKey by ID"
								r.operationID = "deleteApiKey"
								r.pathPattern = "/api-keys/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadApiKey"
								r.summary = "Find a ApiKey by ID"
								r.operationID = "readApiKey"
								r.pathPattern = "/api-keys/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/user"
							if l := len("/user"); len(elem) >= l && elem[0:l] == "/user" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadApiKeyUser
									r.name = "ReadApiKeyUser"
									r.summary = "Find the attached User"
									r.operationID = "readApiKeyUser"
									r.pathPattern = "/api-keys/{id}/user"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				case 'u': // Prefix: "u"
					if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'd': // Prefix: "dits"
						if l := len("dits"); len(elem) >= l && elem[0:l] == "dits" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ListAudit"
								r.summary = "List Audits"
								r.operationID = "listAudit"
								r.pathPattern = "/audits"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "DeleteAudit"
									r.summary = "Deletes a Audit by ID"
									r.operationID = "deleteAudit"
									r.pathPattern = "/audits/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = "ReadAudit"
									r.summary = "Find a Audit by ID"
									r.operationID = "readAudit"
									r.pathPattern = "/audits/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/user"
								if l := len("/user"); len(elem) >= l && elem[0:l] == "/user" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadAuditUser
										r.name = "ReadAuditUser"
										r.summary = "Find the attached User"
										r.operationID = "readAuditUser"
										r.pathPattern = "/audits/{id}/user"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					case 't': // Prefix: "th/"
						if l := len("th/"); len(elem) >= l && elem[0:l] == "th/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'g': // Prefix: "google/"
							if l := len("google/"); len(elem) >= l && elem[0:l] == "google/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "callback"
								if l := len("callback"); len(elem) >= l && elem[0:l] == "callback" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: GoogleAuthCallback
										r.name = "GoogleAuthCallback"
										r.summary = ""
										r.operationID = "googleAuthCallback"
										r.pathPattern = "/auth/google/callback"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							case 's': // Prefix: "s"
								if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 't': // Prefix: "tart"
									if l := len("tart"); len(elem) >= l && elem[0:l] == "tart" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: GoogleAuthStart
											r.name = "GoogleAuthStart"
											r.summary = ""
											r.operationID = "googleAuthStart"
											r.pathPattern = "/auth/google/start"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'y': // Prefix: "ync"
									if l := len("ync"); len(elem) >= l && elem[0:l] == "ync" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: GoogleAuthSync
											r.name = "GoogleAuthSync"
											r.summary = "Synchronize users for the google provider"
											r.operationID = "googleAuthSync"
											r.pathPattern = "/auth/google/sync"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							}
						case 'u': // Prefix: "userpass/login"
							if l := len("userpass/login"); len(elem) >= l && elem[0:l] == "userpass/login" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: UserpassLogin
									r.name = "UserpassLogin"
									r.summary = "Login with a user and password"
									r.operationID = "userpassLogin"
									r.pathPattern = "/auth/userpass/login"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 'd': // Prefix: "devices"
				if l := len("devices"); len(elem) >= l && elem[0:l] == "devices" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListDevice"
						r.summary = "List Devices"
						r.operationID = "listDevice"
						r.pathPattern = "/devices"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateDevice"
						r.summary = "Create a new Device"
						r.operationID = "createDevice"
						r.pathPattern = "/devices"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteDevice"
							r.summary = "Deletes a Device by ID"
							r.operationID = "deleteDevice"
							r.pathPattern = "/devices/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadDevice"
							r.summary = "Find a Device by ID"
							r.operationID = "readDevice"
							r.pathPattern = "/devices/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateDevice"
							r.summary = "Updates a Device"
							r.operationID = "updateDevice"
							r.pathPattern = "/devices/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/user"
						if l := len("/user"); len(elem) >= l && elem[0:l] == "/user" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ReadDeviceUser
								r.name = "ReadDeviceUser"
								r.summary = "Find the attached User"
								r.operationID = "readDeviceUser"
								r.pathPattern = "/devices/{id}/user"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListGroup"
						r.summary = "List Groups"
						r.operationID = "listGroup"
						r.pathPattern = "/groups"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateGroup"
						r.summary = "Create a new Group"
						r.operationID = "createGroup"
						r.pathPattern = "/groups"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteGroup"
							r.summary = "Deletes a Group by ID"
							r.operationID = "deleteGroup"
							r.pathPattern = "/groups/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadGroup"
							r.summary = "Find a Group by ID"
							r.operationID = "readGroup"
							r.pathPattern = "/groups/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateGroup"
							r.summary = "Updates a Group"
							r.operationID = "updateGroup"
							r.pathPattern = "/groups/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/users"
						if l := len("/users"); len(elem) >= l && elem[0:l] == "/users" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ListGroupUsers
								r.name = "ListGroupUsers"
								r.summary = "List attached Users"
								r.operationID = "listGroupUsers"
								r.pathPattern = "/groups/{id}/users"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'l': // Prefix: "logout"
				if l := len("logout"); len(elem) >= l && elem[0:l] == "logout" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: Logout
						r.name = "Logout"
						r.summary = "logout"
						r.operationID = "logout"
						r.pathPattern = "/logout"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 's': // Prefix: "status"
				if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: Status
						r.name = "Status"
						r.summary = "Check authentication status"
						r.operationID = "status"
						r.pathPattern = "/status"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListUser"
						r.summary = "List Users"
						r.operationID = "listUser"
						r.pathPattern = "/users"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateUser"
						r.summary = "Create a new User"
						r.operationID = "createUser"
						r.pathPattern = "/users"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteUser"
							r.summary = "Deletes a User by ID"
							r.operationID = "deleteUser"
							r.pathPattern = "/users/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadUser"
							r.summary = "Find a User by ID"
							r.operationID = "readUser"
							r.pathPattern = "/users/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateUser"
							r.summary = "Updates a User"
							r.operationID = "updateUser"
							r.pathPattern = "/users/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "audit"
							if l := len("audit"); len(elem) >= l && elem[0:l] == "audit" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListUserAudit
									r.name = "ListUserAudit"
									r.summary = "List attached Audits"
									r.operationID = "listUserAudit"
									r.pathPattern = "/users/{id}/audit"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'd': // Prefix: "devices"
							if l := len("devices"); len(elem) >= l && elem[0:l] == "devices" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListUserDevices
									r.name = "ListUserDevices"
									r.summary = "List attached Devices"
									r.operationID = "listUserDevices"
									r.pathPattern = "/users/{id}/devices"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'g': // Prefix: "group"
							if l := len("group"); len(elem) >= l && elem[0:l] == "group" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadUserGroup
									r.name = "ReadUserGroup"
									r.summary = "Find the attached Group"
									r.operationID = "readUserGroup"
									r.pathPattern = "/users/{id}/group"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'k': // Prefix: "keys"
							if l := len("keys"); len(elem) >= l && elem[0:l] == "keys" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListUserKeys
									r.name = "ListUserKeys"
									r.summary = "List attached Keys"
									r.operationID = "listUserKeys"
									r.pathPattern = "/users/{id}/keys"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
