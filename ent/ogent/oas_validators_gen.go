// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *ApiKeyCreate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ApiKeyCreateScopesItem) Validate() error {
	switch s {
	case "user.*":
		return nil
	case "admin.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ApiKeyList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ApiKeyListScopesItem) Validate() error {
	switch s {
	case "user.*":
		return nil
	case "admin.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ApiKeyRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ApiKeyReadScopesItem) Validate() error {
	switch s {
	case "user.*":
		return nil
	case "admin.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreateApiKeyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreateApiKeyReqScopesItem) Validate() error {
	switch s {
	case "user.*":
		return nil
	case "admin.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreateGroupReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if err := func() error {
		if s.Rules == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CreateGroupReqRulesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreateGroupReqRulesItemType) Validate() error {
	switch s {
	case "allow":
		return nil
	case "deny":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreateGroupReqScopesItem) Validate() error {
	switch s {
	case "admin.users.write":
		return nil
	case "admin.users.readonly":
		return nil
	case "admin.groups.write":
		return nil
	case "admin.groups.readonly":
		return nil
	case "admin.devices.write":
		return nil
	case "admin.devices.readonly":
		return nil
	case "admin.settings.write":
		return nil
	case "admin.settings.readonly":
		return nil
	case "admin.*":
		return nil
	case "user.devices.write":
		return nil
	case "user.apikey.write":
		return nil
	case "user.devices.readonly":
		return nil
	case "user.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *DeviceCreate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.DNS == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dns",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DeviceList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.DNS == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dns",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DeviceRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.DNS == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dns",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DeviceUpdate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.DNS == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dns",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GroupCreate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if err := func() error {
		if s.Rules == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GroupCreateRulesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GroupCreateRulesItemType) Validate() error {
	switch s {
	case "allow":
		return nil
	case "deny":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GroupCreateScopesItem) Validate() error {
	switch s {
	case "admin.users.write":
		return nil
	case "admin.users.readonly":
		return nil
	case "admin.groups.write":
		return nil
	case "admin.groups.readonly":
		return nil
	case "admin.devices.write":
		return nil
	case "admin.devices.readonly":
		return nil
	case "admin.settings.write":
		return nil
	case "admin.settings.readonly":
		return nil
	case "admin.*":
		return nil
	case "user.devices.write":
		return nil
	case "user.apikey.write":
		return nil
	case "user.devices.readonly":
		return nil
	case "user.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GroupList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if err := func() error {
		if s.Rules == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GroupListRulesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GroupListRulesItemType) Validate() error {
	switch s {
	case "allow":
		return nil
	case "deny":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GroupListScopesItem) Validate() error {
	switch s {
	case "admin.users.write":
		return nil
	case "admin.users.readonly":
		return nil
	case "admin.groups.write":
		return nil
	case "admin.groups.readonly":
		return nil
	case "admin.devices.write":
		return nil
	case "admin.devices.readonly":
		return nil
	case "admin.settings.write":
		return nil
	case "admin.settings.readonly":
		return nil
	case "admin.*":
		return nil
	case "user.devices.write":
		return nil
	case "user.apikey.write":
		return nil
	case "user.devices.readonly":
		return nil
	case "user.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GroupRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if err := func() error {
		if s.Rules == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GroupReadRulesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GroupReadRulesItemType) Validate() error {
	switch s {
	case "allow":
		return nil
	case "deny":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GroupReadScopesItem) Validate() error {
	switch s {
	case "admin.users.write":
		return nil
	case "admin.users.readonly":
		return nil
	case "admin.groups.write":
		return nil
	case "admin.groups.readonly":
		return nil
	case "admin.devices.write":
		return nil
	case "admin.devices.readonly":
		return nil
	case "admin.settings.write":
		return nil
	case "admin.settings.readonly":
		return nil
	case "admin.*":
		return nil
	case "user.devices.write":
		return nil
	case "user.apikey.write":
		return nil
	case "user.devices.readonly":
		return nil
	case "user.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GroupUpdate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if err := func() error {
		if s.Rules == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GroupUpdateRulesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GroupUpdateRulesItemType) Validate() error {
	switch s {
	case "allow":
		return nil
	case "deny":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GroupUpdateScopesItem) Validate() error {
	switch s {
	case "admin.users.write":
		return nil
	case "admin.users.readonly":
		return nil
	case "admin.groups.write":
		return nil
	case "admin.groups.readonly":
		return nil
	case "admin.devices.write":
		return nil
	case "admin.devices.readonly":
		return nil
	case "admin.settings.write":
		return nil
	case "admin.settings.readonly":
		return nil
	case "admin.*":
		return nil
	case "user.devices.write":
		return nil
	case "user.apikey.write":
		return nil
	case "user.devices.readonly":
		return nil
	case "user.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListApiKeyOKApplicationJSON) Validate() error {
	alias := ([]ApiKeyList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListAuditOKApplicationJSON) Validate() error {
	alias := ([]AuditList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListDeviceOKApplicationJSON) Validate() error {
	alias := ([]DeviceList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListGroupOKApplicationJSON) Validate() error {
	alias := ([]GroupList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListGroupUsersOKApplicationJSON) Validate() error {
	alias := ([]GroupUsersList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListUserAuditOKApplicationJSON) Validate() error {
	alias := ([]UserAuditList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListUserDevicesOKApplicationJSON) Validate() error {
	alias := ([]UserDevicesList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListUserKeysOKApplicationJSON) Validate() error {
	alias := ([]UserKeysList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListUserOKApplicationJSON) Validate() error {
	alias := ([]UserList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *UpdateGroupReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateGroupReqRulesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateGroupReqRulesItemType) Validate() error {
	switch s {
	case "allow":
		return nil
	case "deny":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateGroupReqScopesItem) Validate() error {
	switch s {
	case "admin.users.write":
		return nil
	case "admin.users.readonly":
		return nil
	case "admin.groups.write":
		return nil
	case "admin.groups.readonly":
		return nil
	case "admin.devices.write":
		return nil
	case "admin.devices.readonly":
		return nil
	case "admin.settings.write":
		return nil
	case "admin.settings.readonly":
		return nil
	case "admin.*":
		return nil
	case "user.devices.write":
		return nil
	case "user.apikey.write":
		return nil
	case "user.devices.readonly":
		return nil
	case "user.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UserDevicesList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.DNS == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dns",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UserGroupRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if err := func() error {
		if s.Rules == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UserGroupReadRulesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UserGroupReadRulesItemType) Validate() error {
	switch s {
	case "allow":
		return nil
	case "deny":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UserGroupReadScopesItem) Validate() error {
	switch s {
	case "admin.users.write":
		return nil
	case "admin.users.readonly":
		return nil
	case "admin.groups.write":
		return nil
	case "admin.groups.readonly":
		return nil
	case "admin.devices.write":
		return nil
	case "admin.devices.readonly":
		return nil
	case "admin.settings.write":
		return nil
	case "admin.settings.readonly":
		return nil
	case "admin.*":
		return nil
	case "user.devices.write":
		return nil
	case "user.apikey.write":
		return nil
	case "user.devices.readonly":
		return nil
	case "user.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UserKeysList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Scopes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UserKeysListScopesItem) Validate() error {
	switch s {
	case "user.*":
		return nil
	case "admin.*":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
