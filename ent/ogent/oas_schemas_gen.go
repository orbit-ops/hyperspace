// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/url"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type ApiKeyAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKeyAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKeyAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/ApiKeyCreate
type ApiKeyCreate struct {
	ID     int                      `json:"id"`
	Name   string                   `json:"name"`
	Scopes []ApiKeyCreateScopesItem `json:"scopes"`
}

// GetID returns the value of ID.
func (s *ApiKeyCreate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *ApiKeyCreate) GetName() string {
	return s.Name
}

// GetScopes returns the value of Scopes.
func (s *ApiKeyCreate) GetScopes() []ApiKeyCreateScopesItem {
	return s.Scopes
}

// SetID sets the value of ID.
func (s *ApiKeyCreate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ApiKeyCreate) SetName(val string) {
	s.Name = val
}

// SetScopes sets the value of Scopes.
func (s *ApiKeyCreate) SetScopes(val []ApiKeyCreateScopesItem) {
	s.Scopes = val
}

func (*ApiKeyCreate) createApiKeyRes() {}

type ApiKeyCreateScopesItem string

const (
	ApiKeyCreateScopesItemUser  ApiKeyCreateScopesItem = "user.*"
	ApiKeyCreateScopesItemAdmin ApiKeyCreateScopesItem = "admin.*"
)

// AllValues returns all ApiKeyCreateScopesItem values.
func (ApiKeyCreateScopesItem) AllValues() []ApiKeyCreateScopesItem {
	return []ApiKeyCreateScopesItem{
		ApiKeyCreateScopesItemUser,
		ApiKeyCreateScopesItemAdmin,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyCreateScopesItem) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyCreateScopesItemUser:
		return []byte(s), nil
	case ApiKeyCreateScopesItemAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyCreateScopesItem) UnmarshalText(data []byte) error {
	switch ApiKeyCreateScopesItem(data) {
	case ApiKeyCreateScopesItemUser:
		*s = ApiKeyCreateScopesItemUser
		return nil
	case ApiKeyCreateScopesItemAdmin:
		*s = ApiKeyCreateScopesItemAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ApiKeyList
type ApiKeyList struct {
	ID     int                    `json:"id"`
	Name   string                 `json:"name"`
	Scopes []ApiKeyListScopesItem `json:"scopes"`
}

// GetID returns the value of ID.
func (s *ApiKeyList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *ApiKeyList) GetName() string {
	return s.Name
}

// GetScopes returns the value of Scopes.
func (s *ApiKeyList) GetScopes() []ApiKeyListScopesItem {
	return s.Scopes
}

// SetID sets the value of ID.
func (s *ApiKeyList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ApiKeyList) SetName(val string) {
	s.Name = val
}

// SetScopes sets the value of Scopes.
func (s *ApiKeyList) SetScopes(val []ApiKeyListScopesItem) {
	s.Scopes = val
}

type ApiKeyListScopesItem string

const (
	ApiKeyListScopesItemUser  ApiKeyListScopesItem = "user.*"
	ApiKeyListScopesItemAdmin ApiKeyListScopesItem = "admin.*"
)

// AllValues returns all ApiKeyListScopesItem values.
func (ApiKeyListScopesItem) AllValues() []ApiKeyListScopesItem {
	return []ApiKeyListScopesItem{
		ApiKeyListScopesItemUser,
		ApiKeyListScopesItemAdmin,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyListScopesItem) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyListScopesItemUser:
		return []byte(s), nil
	case ApiKeyListScopesItemAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyListScopesItem) UnmarshalText(data []byte) error {
	switch ApiKeyListScopesItem(data) {
	case ApiKeyListScopesItemUser:
		*s = ApiKeyListScopesItemUser
		return nil
	case ApiKeyListScopesItemAdmin:
		*s = ApiKeyListScopesItemAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ApiKeyRead
type ApiKeyRead struct {
	ID     int                    `json:"id"`
	Name   string                 `json:"name"`
	Scopes []ApiKeyReadScopesItem `json:"scopes"`
}

// GetID returns the value of ID.
func (s *ApiKeyRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *ApiKeyRead) GetName() string {
	return s.Name
}

// GetScopes returns the value of Scopes.
func (s *ApiKeyRead) GetScopes() []ApiKeyReadScopesItem {
	return s.Scopes
}

// SetID sets the value of ID.
func (s *ApiKeyRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ApiKeyRead) SetName(val string) {
	s.Name = val
}

// SetScopes sets the value of Scopes.
func (s *ApiKeyRead) SetScopes(val []ApiKeyReadScopesItem) {
	s.Scopes = val
}

func (*ApiKeyRead) readApiKeyRes() {}

type ApiKeyReadScopesItem string

const (
	ApiKeyReadScopesItemUser  ApiKeyReadScopesItem = "user.*"
	ApiKeyReadScopesItemAdmin ApiKeyReadScopesItem = "admin.*"
)

// AllValues returns all ApiKeyReadScopesItem values.
func (ApiKeyReadScopesItem) AllValues() []ApiKeyReadScopesItem {
	return []ApiKeyReadScopesItem{
		ApiKeyReadScopesItemUser,
		ApiKeyReadScopesItemAdmin,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyReadScopesItem) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyReadScopesItemUser:
		return []byte(s), nil
	case ApiKeyReadScopesItemAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyReadScopesItem) UnmarshalText(data []byte) error {
	switch ApiKeyReadScopesItem(data) {
	case ApiKeyReadScopesItemUser:
		*s = ApiKeyReadScopesItemUser
		return nil
	case ApiKeyReadScopesItemAdmin:
		*s = ApiKeyReadScopesItemAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ApiKey_UserRead
type ApiKeyUserRead struct {
	ID             string    `json:"id"`
	Email          string    `json:"email"`
	Firstname      string    `json:"firstname"`
	Lastname       string    `json:"lastname"`
	Provider       string    `json:"provider"`
	PhotoURL       OptString `json:"photo_url"`
	Disabled       bool      `json:"disabled"`
	DisabledReason OptString `json:"disabled_reason"`
}

// GetID returns the value of ID.
func (s *ApiKeyUserRead) GetID() string {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *ApiKeyUserRead) GetEmail() string {
	return s.Email
}

// GetFirstname returns the value of Firstname.
func (s *ApiKeyUserRead) GetFirstname() string {
	return s.Firstname
}

// GetLastname returns the value of Lastname.
func (s *ApiKeyUserRead) GetLastname() string {
	return s.Lastname
}

// GetProvider returns the value of Provider.
func (s *ApiKeyUserRead) GetProvider() string {
	return s.Provider
}

// GetPhotoURL returns the value of PhotoURL.
func (s *ApiKeyUserRead) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetDisabled returns the value of Disabled.
func (s *ApiKeyUserRead) GetDisabled() bool {
	return s.Disabled
}

// GetDisabledReason returns the value of DisabledReason.
func (s *ApiKeyUserRead) GetDisabledReason() OptString {
	return s.DisabledReason
}

// SetID sets the value of ID.
func (s *ApiKeyUserRead) SetID(val string) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *ApiKeyUserRead) SetEmail(val string) {
	s.Email = val
}

// SetFirstname sets the value of Firstname.
func (s *ApiKeyUserRead) SetFirstname(val string) {
	s.Firstname = val
}

// SetLastname sets the value of Lastname.
func (s *ApiKeyUserRead) SetLastname(val string) {
	s.Lastname = val
}

// SetProvider sets the value of Provider.
func (s *ApiKeyUserRead) SetProvider(val string) {
	s.Provider = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *ApiKeyUserRead) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetDisabled sets the value of Disabled.
func (s *ApiKeyUserRead) SetDisabled(val bool) {
	s.Disabled = val
}

// SetDisabledReason sets the value of DisabledReason.
func (s *ApiKeyUserRead) SetDisabledReason(val OptString) {
	s.DisabledReason = val
}

func (*ApiKeyUserRead) readApiKeyUserRes() {}

type CookieAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *CookieAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *CookieAuth) SetAPIKey(val string) {
	s.APIKey = val
}

type CreateApiKeyReq struct {
	Name   string                      `json:"name"`
	Key    string                      `json:"key"`
	Scopes []CreateApiKeyReqScopesItem `json:"scopes"`
	User   string                      `json:"user"`
}

// GetName returns the value of Name.
func (s *CreateApiKeyReq) GetName() string {
	return s.Name
}

// GetKey returns the value of Key.
func (s *CreateApiKeyReq) GetKey() string {
	return s.Key
}

// GetScopes returns the value of Scopes.
func (s *CreateApiKeyReq) GetScopes() []CreateApiKeyReqScopesItem {
	return s.Scopes
}

// GetUser returns the value of User.
func (s *CreateApiKeyReq) GetUser() string {
	return s.User
}

// SetName sets the value of Name.
func (s *CreateApiKeyReq) SetName(val string) {
	s.Name = val
}

// SetKey sets the value of Key.
func (s *CreateApiKeyReq) SetKey(val string) {
	s.Key = val
}

// SetScopes sets the value of Scopes.
func (s *CreateApiKeyReq) SetScopes(val []CreateApiKeyReqScopesItem) {
	s.Scopes = val
}

// SetUser sets the value of User.
func (s *CreateApiKeyReq) SetUser(val string) {
	s.User = val
}

type CreateApiKeyReqScopesItem string

const (
	CreateApiKeyReqScopesItemUser  CreateApiKeyReqScopesItem = "user.*"
	CreateApiKeyReqScopesItemAdmin CreateApiKeyReqScopesItem = "admin.*"
)

// AllValues returns all CreateApiKeyReqScopesItem values.
func (CreateApiKeyReqScopesItem) AllValues() []CreateApiKeyReqScopesItem {
	return []CreateApiKeyReqScopesItem{
		CreateApiKeyReqScopesItemUser,
		CreateApiKeyReqScopesItemAdmin,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateApiKeyReqScopesItem) MarshalText() ([]byte, error) {
	switch s {
	case CreateApiKeyReqScopesItemUser:
		return []byte(s), nil
	case CreateApiKeyReqScopesItemAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateApiKeyReqScopesItem) UnmarshalText(data []byte) error {
	switch CreateApiKeyReqScopesItem(data) {
	case CreateApiKeyReqScopesItemUser:
		*s = CreateApiKeyReqScopesItemUser
		return nil
	case CreateApiKeyReqScopesItemAdmin:
		*s = CreateApiKeyReqScopesItemAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateDeviceReq struct {
	Name        string    `json:"name"`
	Description OptString `json:"description"`
	Type        string    `json:"type"`
	PublicKey   string    `json:"public_key"`
	User        OptString `json:"user"`
}

// GetName returns the value of Name.
func (s *CreateDeviceReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateDeviceReq) GetDescription() OptString {
	return s.Description
}

// GetType returns the value of Type.
func (s *CreateDeviceReq) GetType() string {
	return s.Type
}

// GetPublicKey returns the value of PublicKey.
func (s *CreateDeviceReq) GetPublicKey() string {
	return s.PublicKey
}

// GetUser returns the value of User.
func (s *CreateDeviceReq) GetUser() OptString {
	return s.User
}

// SetName sets the value of Name.
func (s *CreateDeviceReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateDeviceReq) SetDescription(val OptString) {
	s.Description = val
}

// SetType sets the value of Type.
func (s *CreateDeviceReq) SetType(val string) {
	s.Type = val
}

// SetPublicKey sets the value of PublicKey.
func (s *CreateDeviceReq) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetUser sets the value of User.
func (s *CreateDeviceReq) SetUser(val OptString) {
	s.User = val
}

type CreateGroupReq struct {
	Scopes []CreateGroupReqScopesItem `json:"scopes"`
	Cidr   string                     `json:"cidr"`
	Rules  []CreateGroupReqRulesItem  `json:"rules"`
	Users  []string                   `json:"users"`
}

// GetScopes returns the value of Scopes.
func (s *CreateGroupReq) GetScopes() []CreateGroupReqScopesItem {
	return s.Scopes
}

// GetCidr returns the value of Cidr.
func (s *CreateGroupReq) GetCidr() string {
	return s.Cidr
}

// GetRules returns the value of Rules.
func (s *CreateGroupReq) GetRules() []CreateGroupReqRulesItem {
	return s.Rules
}

// GetUsers returns the value of Users.
func (s *CreateGroupReq) GetUsers() []string {
	return s.Users
}

// SetScopes sets the value of Scopes.
func (s *CreateGroupReq) SetScopes(val []CreateGroupReqScopesItem) {
	s.Scopes = val
}

// SetCidr sets the value of Cidr.
func (s *CreateGroupReq) SetCidr(val string) {
	s.Cidr = val
}

// SetRules sets the value of Rules.
func (s *CreateGroupReq) SetRules(val []CreateGroupReqRulesItem) {
	s.Rules = val
}

// SetUsers sets the value of Users.
func (s *CreateGroupReq) SetUsers(val []string) {
	s.Users = val
}

type CreateGroupReqRulesItem struct {
	ID     string                      `json:"id"`
	Target string                      `json:"target"`
	Type   CreateGroupReqRulesItemType `json:"type"`
}

// GetID returns the value of ID.
func (s *CreateGroupReqRulesItem) GetID() string {
	return s.ID
}

// GetTarget returns the value of Target.
func (s *CreateGroupReqRulesItem) GetTarget() string {
	return s.Target
}

// GetType returns the value of Type.
func (s *CreateGroupReqRulesItem) GetType() CreateGroupReqRulesItemType {
	return s.Type
}

// SetID sets the value of ID.
func (s *CreateGroupReqRulesItem) SetID(val string) {
	s.ID = val
}

// SetTarget sets the value of Target.
func (s *CreateGroupReqRulesItem) SetTarget(val string) {
	s.Target = val
}

// SetType sets the value of Type.
func (s *CreateGroupReqRulesItem) SetType(val CreateGroupReqRulesItemType) {
	s.Type = val
}

type CreateGroupReqRulesItemType string

const (
	CreateGroupReqRulesItemTypeAllow CreateGroupReqRulesItemType = "allow"
	CreateGroupReqRulesItemTypeDeny  CreateGroupReqRulesItemType = "deny"
)

// AllValues returns all CreateGroupReqRulesItemType values.
func (CreateGroupReqRulesItemType) AllValues() []CreateGroupReqRulesItemType {
	return []CreateGroupReqRulesItemType{
		CreateGroupReqRulesItemTypeAllow,
		CreateGroupReqRulesItemTypeDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateGroupReqRulesItemType) MarshalText() ([]byte, error) {
	switch s {
	case CreateGroupReqRulesItemTypeAllow:
		return []byte(s), nil
	case CreateGroupReqRulesItemTypeDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateGroupReqRulesItemType) UnmarshalText(data []byte) error {
	switch CreateGroupReqRulesItemType(data) {
	case CreateGroupReqRulesItemTypeAllow:
		*s = CreateGroupReqRulesItemTypeAllow
		return nil
	case CreateGroupReqRulesItemTypeDeny:
		*s = CreateGroupReqRulesItemTypeDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateGroupReqScopesItem string

const (
	CreateGroupReqScopesItemUser  CreateGroupReqScopesItem = "user.*"
	CreateGroupReqScopesItemAdmin CreateGroupReqScopesItem = "admin.*"
)

// AllValues returns all CreateGroupReqScopesItem values.
func (CreateGroupReqScopesItem) AllValues() []CreateGroupReqScopesItem {
	return []CreateGroupReqScopesItem{
		CreateGroupReqScopesItemUser,
		CreateGroupReqScopesItemAdmin,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateGroupReqScopesItem) MarshalText() ([]byte, error) {
	switch s {
	case CreateGroupReqScopesItemUser:
		return []byte(s), nil
	case CreateGroupReqScopesItemAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateGroupReqScopesItem) UnmarshalText(data []byte) error {
	switch CreateGroupReqScopesItem(data) {
	case CreateGroupReqScopesItemUser:
		*s = CreateGroupReqScopesItemUser
		return nil
	case CreateGroupReqScopesItemAdmin:
		*s = CreateGroupReqScopesItemAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateUserReq struct {
	Email          string    `json:"email"`
	Firstname      string    `json:"firstname"`
	Lastname       string    `json:"lastname"`
	Provider       string    `json:"provider"`
	Password       OptString `json:"password"`
	Salt           OptString `json:"salt"`
	PhotoURL       OptString `json:"photo_url"`
	Disabled       bool      `json:"disabled"`
	DisabledReason OptString `json:"disabled_reason"`
	Group          string    `json:"group"`
	Devices        []int     `json:"devices"`
	Keys           []int     `json:"keys"`
}

// GetEmail returns the value of Email.
func (s *CreateUserReq) GetEmail() string {
	return s.Email
}

// GetFirstname returns the value of Firstname.
func (s *CreateUserReq) GetFirstname() string {
	return s.Firstname
}

// GetLastname returns the value of Lastname.
func (s *CreateUserReq) GetLastname() string {
	return s.Lastname
}

// GetProvider returns the value of Provider.
func (s *CreateUserReq) GetProvider() string {
	return s.Provider
}

// GetPassword returns the value of Password.
func (s *CreateUserReq) GetPassword() OptString {
	return s.Password
}

// GetSalt returns the value of Salt.
func (s *CreateUserReq) GetSalt() OptString {
	return s.Salt
}

// GetPhotoURL returns the value of PhotoURL.
func (s *CreateUserReq) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetDisabled returns the value of Disabled.
func (s *CreateUserReq) GetDisabled() bool {
	return s.Disabled
}

// GetDisabledReason returns the value of DisabledReason.
func (s *CreateUserReq) GetDisabledReason() OptString {
	return s.DisabledReason
}

// GetGroup returns the value of Group.
func (s *CreateUserReq) GetGroup() string {
	return s.Group
}

// GetDevices returns the value of Devices.
func (s *CreateUserReq) GetDevices() []int {
	return s.Devices
}

// GetKeys returns the value of Keys.
func (s *CreateUserReq) GetKeys() []int {
	return s.Keys
}

// SetEmail sets the value of Email.
func (s *CreateUserReq) SetEmail(val string) {
	s.Email = val
}

// SetFirstname sets the value of Firstname.
func (s *CreateUserReq) SetFirstname(val string) {
	s.Firstname = val
}

// SetLastname sets the value of Lastname.
func (s *CreateUserReq) SetLastname(val string) {
	s.Lastname = val
}

// SetProvider sets the value of Provider.
func (s *CreateUserReq) SetProvider(val string) {
	s.Provider = val
}

// SetPassword sets the value of Password.
func (s *CreateUserReq) SetPassword(val OptString) {
	s.Password = val
}

// SetSalt sets the value of Salt.
func (s *CreateUserReq) SetSalt(val OptString) {
	s.Salt = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *CreateUserReq) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetDisabled sets the value of Disabled.
func (s *CreateUserReq) SetDisabled(val bool) {
	s.Disabled = val
}

// SetDisabledReason sets the value of DisabledReason.
func (s *CreateUserReq) SetDisabledReason(val OptString) {
	s.DisabledReason = val
}

// SetGroup sets the value of Group.
func (s *CreateUserReq) SetGroup(val string) {
	s.Group = val
}

// SetDevices sets the value of Devices.
func (s *CreateUserReq) SetDevices(val []int) {
	s.Devices = val
}

// SetKeys sets the value of Keys.
func (s *CreateUserReq) SetKeys(val []int) {
	s.Keys = val
}

// DeleteApiKeyNoContent is response for DeleteApiKey operation.
type DeleteApiKeyNoContent struct{}

func (*DeleteApiKeyNoContent) deleteApiKeyRes() {}

// DeleteDeviceNoContent is response for DeleteDevice operation.
type DeleteDeviceNoContent struct{}

func (*DeleteDeviceNoContent) deleteDeviceRes() {}

// DeleteGroupNoContent is response for DeleteGroup operation.
type DeleteGroupNoContent struct{}

func (*DeleteGroupNoContent) deleteGroupRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

// Ref: #/components/schemas/DeviceCreate
type DeviceCreate struct {
	ID           int       `json:"id"`
	Name         string    `json:"name"`
	Description  OptString `json:"description"`
	Type         string    `json:"type"`
	PublicKey    string    `json:"public_key"`
	PresharedKey string    `json:"preshared_key"`
	Endpoint     string    `json:"endpoint"`
	AllowedIps   string    `json:"allowed_ips"`
}

// GetID returns the value of ID.
func (s *DeviceCreate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *DeviceCreate) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *DeviceCreate) GetDescription() OptString {
	return s.Description
}

// GetType returns the value of Type.
func (s *DeviceCreate) GetType() string {
	return s.Type
}

// GetPublicKey returns the value of PublicKey.
func (s *DeviceCreate) GetPublicKey() string {
	return s.PublicKey
}

// GetPresharedKey returns the value of PresharedKey.
func (s *DeviceCreate) GetPresharedKey() string {
	return s.PresharedKey
}

// GetEndpoint returns the value of Endpoint.
func (s *DeviceCreate) GetEndpoint() string {
	return s.Endpoint
}

// GetAllowedIps returns the value of AllowedIps.
func (s *DeviceCreate) GetAllowedIps() string {
	return s.AllowedIps
}

// SetID sets the value of ID.
func (s *DeviceCreate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DeviceCreate) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *DeviceCreate) SetDescription(val OptString) {
	s.Description = val
}

// SetType sets the value of Type.
func (s *DeviceCreate) SetType(val string) {
	s.Type = val
}

// SetPublicKey sets the value of PublicKey.
func (s *DeviceCreate) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetPresharedKey sets the value of PresharedKey.
func (s *DeviceCreate) SetPresharedKey(val string) {
	s.PresharedKey = val
}

// SetEndpoint sets the value of Endpoint.
func (s *DeviceCreate) SetEndpoint(val string) {
	s.Endpoint = val
}

// SetAllowedIps sets the value of AllowedIps.
func (s *DeviceCreate) SetAllowedIps(val string) {
	s.AllowedIps = val
}

func (*DeviceCreate) createDeviceRes() {}

// Ref: #/components/schemas/DeviceList
type DeviceList struct {
	ID          int       `json:"id"`
	Name        string    `json:"name"`
	Description OptString `json:"description"`
	Type        string    `json:"type"`
	PublicKey   string    `json:"public_key"`
	Endpoint    string    `json:"endpoint"`
	AllowedIps  string    `json:"allowed_ips"`
}

// GetID returns the value of ID.
func (s *DeviceList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *DeviceList) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *DeviceList) GetDescription() OptString {
	return s.Description
}

// GetType returns the value of Type.
func (s *DeviceList) GetType() string {
	return s.Type
}

// GetPublicKey returns the value of PublicKey.
func (s *DeviceList) GetPublicKey() string {
	return s.PublicKey
}

// GetEndpoint returns the value of Endpoint.
func (s *DeviceList) GetEndpoint() string {
	return s.Endpoint
}

// GetAllowedIps returns the value of AllowedIps.
func (s *DeviceList) GetAllowedIps() string {
	return s.AllowedIps
}

// SetID sets the value of ID.
func (s *DeviceList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DeviceList) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *DeviceList) SetDescription(val OptString) {
	s.Description = val
}

// SetType sets the value of Type.
func (s *DeviceList) SetType(val string) {
	s.Type = val
}

// SetPublicKey sets the value of PublicKey.
func (s *DeviceList) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetEndpoint sets the value of Endpoint.
func (s *DeviceList) SetEndpoint(val string) {
	s.Endpoint = val
}

// SetAllowedIps sets the value of AllowedIps.
func (s *DeviceList) SetAllowedIps(val string) {
	s.AllowedIps = val
}

// Ref: #/components/schemas/DeviceRead
type DeviceRead struct {
	ID          int       `json:"id"`
	Name        string    `json:"name"`
	Description OptString `json:"description"`
	Type        string    `json:"type"`
	PublicKey   string    `json:"public_key"`
	Endpoint    string    `json:"endpoint"`
	AllowedIps  string    `json:"allowed_ips"`
}

// GetID returns the value of ID.
func (s *DeviceRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *DeviceRead) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *DeviceRead) GetDescription() OptString {
	return s.Description
}

// GetType returns the value of Type.
func (s *DeviceRead) GetType() string {
	return s.Type
}

// GetPublicKey returns the value of PublicKey.
func (s *DeviceRead) GetPublicKey() string {
	return s.PublicKey
}

// GetEndpoint returns the value of Endpoint.
func (s *DeviceRead) GetEndpoint() string {
	return s.Endpoint
}

// GetAllowedIps returns the value of AllowedIps.
func (s *DeviceRead) GetAllowedIps() string {
	return s.AllowedIps
}

// SetID sets the value of ID.
func (s *DeviceRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DeviceRead) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *DeviceRead) SetDescription(val OptString) {
	s.Description = val
}

// SetType sets the value of Type.
func (s *DeviceRead) SetType(val string) {
	s.Type = val
}

// SetPublicKey sets the value of PublicKey.
func (s *DeviceRead) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetEndpoint sets the value of Endpoint.
func (s *DeviceRead) SetEndpoint(val string) {
	s.Endpoint = val
}

// SetAllowedIps sets the value of AllowedIps.
func (s *DeviceRead) SetAllowedIps(val string) {
	s.AllowedIps = val
}

func (*DeviceRead) readDeviceRes() {}

// Ref: #/components/schemas/DeviceUpdate
type DeviceUpdate struct {
	ID          int       `json:"id"`
	Name        string    `json:"name"`
	Description OptString `json:"description"`
	Type        string    `json:"type"`
	PublicKey   string    `json:"public_key"`
	Endpoint    string    `json:"endpoint"`
	AllowedIps  string    `json:"allowed_ips"`
}

// GetID returns the value of ID.
func (s *DeviceUpdate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *DeviceUpdate) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *DeviceUpdate) GetDescription() OptString {
	return s.Description
}

// GetType returns the value of Type.
func (s *DeviceUpdate) GetType() string {
	return s.Type
}

// GetPublicKey returns the value of PublicKey.
func (s *DeviceUpdate) GetPublicKey() string {
	return s.PublicKey
}

// GetEndpoint returns the value of Endpoint.
func (s *DeviceUpdate) GetEndpoint() string {
	return s.Endpoint
}

// GetAllowedIps returns the value of AllowedIps.
func (s *DeviceUpdate) GetAllowedIps() string {
	return s.AllowedIps
}

// SetID sets the value of ID.
func (s *DeviceUpdate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DeviceUpdate) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *DeviceUpdate) SetDescription(val OptString) {
	s.Description = val
}

// SetType sets the value of Type.
func (s *DeviceUpdate) SetType(val string) {
	s.Type = val
}

// SetPublicKey sets the value of PublicKey.
func (s *DeviceUpdate) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetEndpoint sets the value of Endpoint.
func (s *DeviceUpdate) SetEndpoint(val string) {
	s.Endpoint = val
}

// SetAllowedIps sets the value of AllowedIps.
func (s *DeviceUpdate) SetAllowedIps(val string) {
	s.AllowedIps = val
}

func (*DeviceUpdate) updateDeviceRes() {}

// Ref: #/components/schemas/Device_UserRead
type DeviceUserRead struct {
	ID             string    `json:"id"`
	Email          string    `json:"email"`
	Firstname      string    `json:"firstname"`
	Lastname       string    `json:"lastname"`
	Provider       string    `json:"provider"`
	PhotoURL       OptString `json:"photo_url"`
	Disabled       bool      `json:"disabled"`
	DisabledReason OptString `json:"disabled_reason"`
}

// GetID returns the value of ID.
func (s *DeviceUserRead) GetID() string {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *DeviceUserRead) GetEmail() string {
	return s.Email
}

// GetFirstname returns the value of Firstname.
func (s *DeviceUserRead) GetFirstname() string {
	return s.Firstname
}

// GetLastname returns the value of Lastname.
func (s *DeviceUserRead) GetLastname() string {
	return s.Lastname
}

// GetProvider returns the value of Provider.
func (s *DeviceUserRead) GetProvider() string {
	return s.Provider
}

// GetPhotoURL returns the value of PhotoURL.
func (s *DeviceUserRead) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetDisabled returns the value of Disabled.
func (s *DeviceUserRead) GetDisabled() bool {
	return s.Disabled
}

// GetDisabledReason returns the value of DisabledReason.
func (s *DeviceUserRead) GetDisabledReason() OptString {
	return s.DisabledReason
}

// SetID sets the value of ID.
func (s *DeviceUserRead) SetID(val string) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *DeviceUserRead) SetEmail(val string) {
	s.Email = val
}

// SetFirstname sets the value of Firstname.
func (s *DeviceUserRead) SetFirstname(val string) {
	s.Firstname = val
}

// SetLastname sets the value of Lastname.
func (s *DeviceUserRead) SetLastname(val string) {
	s.Lastname = val
}

// SetProvider sets the value of Provider.
func (s *DeviceUserRead) SetProvider(val string) {
	s.Provider = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *DeviceUserRead) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetDisabled sets the value of Disabled.
func (s *DeviceUserRead) SetDisabled(val bool) {
	s.Disabled = val
}

// SetDisabledReason sets the value of DisabledReason.
func (s *DeviceUserRead) SetDisabledReason(val OptString) {
	s.DisabledReason = val
}

func (*DeviceUserRead) readDeviceUserRes() {}

// GoogleAuthCallbackBadRequest is response for GoogleAuthCallback operation.
type GoogleAuthCallbackBadRequest struct{}

func (*GoogleAuthCallbackBadRequest) googleAuthCallbackRes() {}

// GoogleAuthCallbackInternalServerError is response for GoogleAuthCallback operation.
type GoogleAuthCallbackInternalServerError struct{}

func (*GoogleAuthCallbackInternalServerError) googleAuthCallbackRes() {}

// GoogleAuthCallbackMovedPermanently is response for GoogleAuthCallback operation.
type GoogleAuthCallbackMovedPermanently struct {
	Location  OptURI
	SetCookie OptString
}

// GetLocation returns the value of Location.
func (s *GoogleAuthCallbackMovedPermanently) GetLocation() OptURI {
	return s.Location
}

// GetSetCookie returns the value of SetCookie.
func (s *GoogleAuthCallbackMovedPermanently) GetSetCookie() OptString {
	return s.SetCookie
}

// SetLocation sets the value of Location.
func (s *GoogleAuthCallbackMovedPermanently) SetLocation(val OptURI) {
	s.Location = val
}

// SetSetCookie sets the value of SetCookie.
func (s *GoogleAuthCallbackMovedPermanently) SetSetCookie(val OptString) {
	s.SetCookie = val
}

func (*GoogleAuthCallbackMovedPermanently) googleAuthCallbackRes() {}

type GoogleAuthCallbackReq struct {
	SAMLResponse string `json:"SAMLResponse"`
	RelayState   string `json:"RelayState"`
}

// GetSAMLResponse returns the value of SAMLResponse.
func (s *GoogleAuthCallbackReq) GetSAMLResponse() string {
	return s.SAMLResponse
}

// GetRelayState returns the value of RelayState.
func (s *GoogleAuthCallbackReq) GetRelayState() string {
	return s.RelayState
}

// SetSAMLResponse sets the value of SAMLResponse.
func (s *GoogleAuthCallbackReq) SetSAMLResponse(val string) {
	s.SAMLResponse = val
}

// SetRelayState sets the value of RelayState.
func (s *GoogleAuthCallbackReq) SetRelayState(val string) {
	s.RelayState = val
}

// GoogleAuthCallbackUnauthorized is response for GoogleAuthCallback operation.
type GoogleAuthCallbackUnauthorized struct{}

func (*GoogleAuthCallbackUnauthorized) googleAuthCallbackRes() {}

// GoogleAuthStartBadRequest is response for GoogleAuthStart operation.
type GoogleAuthStartBadRequest struct{}

func (*GoogleAuthStartBadRequest) googleAuthStartRes() {}

// GoogleAuthStartMovedPermanently is response for GoogleAuthStart operation.
type GoogleAuthStartMovedPermanently struct {
	Location OptURI
}

// GetLocation returns the value of Location.
func (s *GoogleAuthStartMovedPermanently) GetLocation() OptURI {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *GoogleAuthStartMovedPermanently) SetLocation(val OptURI) {
	s.Location = val
}

func (*GoogleAuthStartMovedPermanently) googleAuthStartRes() {}

// GoogleAuthSyncInternalServerError is response for GoogleAuthSync operation.
type GoogleAuthSyncInternalServerError struct{}

func (*GoogleAuthSyncInternalServerError) googleAuthSyncRes() {}

// GoogleAuthSyncOK is response for GoogleAuthSync operation.
type GoogleAuthSyncOK struct{}

func (*GoogleAuthSyncOK) googleAuthSyncRes() {}

// Ref: #/components/schemas/GroupCreate
type GroupCreate struct {
	ID     string                  `json:"id"`
	Scopes []GroupCreateScopesItem `json:"scopes"`
	Cidr   string                  `json:"cidr"`
	Rules  []GroupCreateRulesItem  `json:"rules"`
}

// GetID returns the value of ID.
func (s *GroupCreate) GetID() string {
	return s.ID
}

// GetScopes returns the value of Scopes.
func (s *GroupCreate) GetScopes() []GroupCreateScopesItem {
	return s.Scopes
}

// GetCidr returns the value of Cidr.
func (s *GroupCreate) GetCidr() string {
	return s.Cidr
}

// GetRules returns the value of Rules.
func (s *GroupCreate) GetRules() []GroupCreateRulesItem {
	return s.Rules
}

// SetID sets the value of ID.
func (s *GroupCreate) SetID(val string) {
	s.ID = val
}

// SetScopes sets the value of Scopes.
func (s *GroupCreate) SetScopes(val []GroupCreateScopesItem) {
	s.Scopes = val
}

// SetCidr sets the value of Cidr.
func (s *GroupCreate) SetCidr(val string) {
	s.Cidr = val
}

// SetRules sets the value of Rules.
func (s *GroupCreate) SetRules(val []GroupCreateRulesItem) {
	s.Rules = val
}

func (*GroupCreate) createGroupRes() {}

type GroupCreateRulesItem struct {
	ID     string                   `json:"id"`
	Target string                   `json:"target"`
	Type   GroupCreateRulesItemType `json:"type"`
}

// GetID returns the value of ID.
func (s *GroupCreateRulesItem) GetID() string {
	return s.ID
}

// GetTarget returns the value of Target.
func (s *GroupCreateRulesItem) GetTarget() string {
	return s.Target
}

// GetType returns the value of Type.
func (s *GroupCreateRulesItem) GetType() GroupCreateRulesItemType {
	return s.Type
}

// SetID sets the value of ID.
func (s *GroupCreateRulesItem) SetID(val string) {
	s.ID = val
}

// SetTarget sets the value of Target.
func (s *GroupCreateRulesItem) SetTarget(val string) {
	s.Target = val
}

// SetType sets the value of Type.
func (s *GroupCreateRulesItem) SetType(val GroupCreateRulesItemType) {
	s.Type = val
}

type GroupCreateRulesItemType string

const (
	GroupCreateRulesItemTypeAllow GroupCreateRulesItemType = "allow"
	GroupCreateRulesItemTypeDeny  GroupCreateRulesItemType = "deny"
)

// AllValues returns all GroupCreateRulesItemType values.
func (GroupCreateRulesItemType) AllValues() []GroupCreateRulesItemType {
	return []GroupCreateRulesItemType{
		GroupCreateRulesItemTypeAllow,
		GroupCreateRulesItemTypeDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GroupCreateRulesItemType) MarshalText() ([]byte, error) {
	switch s {
	case GroupCreateRulesItemTypeAllow:
		return []byte(s), nil
	case GroupCreateRulesItemTypeDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GroupCreateRulesItemType) UnmarshalText(data []byte) error {
	switch GroupCreateRulesItemType(data) {
	case GroupCreateRulesItemTypeAllow:
		*s = GroupCreateRulesItemTypeAllow
		return nil
	case GroupCreateRulesItemTypeDeny:
		*s = GroupCreateRulesItemTypeDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GroupCreateScopesItem string

const (
	GroupCreateScopesItemUser  GroupCreateScopesItem = "user.*"
	GroupCreateScopesItemAdmin GroupCreateScopesItem = "admin.*"
)

// AllValues returns all GroupCreateScopesItem values.
func (GroupCreateScopesItem) AllValues() []GroupCreateScopesItem {
	return []GroupCreateScopesItem{
		GroupCreateScopesItemUser,
		GroupCreateScopesItemAdmin,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GroupCreateScopesItem) MarshalText() ([]byte, error) {
	switch s {
	case GroupCreateScopesItemUser:
		return []byte(s), nil
	case GroupCreateScopesItemAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GroupCreateScopesItem) UnmarshalText(data []byte) error {
	switch GroupCreateScopesItem(data) {
	case GroupCreateScopesItemUser:
		*s = GroupCreateScopesItemUser
		return nil
	case GroupCreateScopesItemAdmin:
		*s = GroupCreateScopesItemAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/GroupList
type GroupList struct {
	ID     string                `json:"id"`
	Scopes []GroupListScopesItem `json:"scopes"`
	Cidr   string                `json:"cidr"`
	Rules  []GroupListRulesItem  `json:"rules"`
}

// GetID returns the value of ID.
func (s *GroupList) GetID() string {
	return s.ID
}

// GetScopes returns the value of Scopes.
func (s *GroupList) GetScopes() []GroupListScopesItem {
	return s.Scopes
}

// GetCidr returns the value of Cidr.
func (s *GroupList) GetCidr() string {
	return s.Cidr
}

// GetRules returns the value of Rules.
func (s *GroupList) GetRules() []GroupListRulesItem {
	return s.Rules
}

// SetID sets the value of ID.
func (s *GroupList) SetID(val string) {
	s.ID = val
}

// SetScopes sets the value of Scopes.
func (s *GroupList) SetScopes(val []GroupListScopesItem) {
	s.Scopes = val
}

// SetCidr sets the value of Cidr.
func (s *GroupList) SetCidr(val string) {
	s.Cidr = val
}

// SetRules sets the value of Rules.
func (s *GroupList) SetRules(val []GroupListRulesItem) {
	s.Rules = val
}

type GroupListRulesItem struct {
	ID     string                 `json:"id"`
	Target string                 `json:"target"`
	Type   GroupListRulesItemType `json:"type"`
}

// GetID returns the value of ID.
func (s *GroupListRulesItem) GetID() string {
	return s.ID
}

// GetTarget returns the value of Target.
func (s *GroupListRulesItem) GetTarget() string {
	return s.Target
}

// GetType returns the value of Type.
func (s *GroupListRulesItem) GetType() GroupListRulesItemType {
	return s.Type
}

// SetID sets the value of ID.
func (s *GroupListRulesItem) SetID(val string) {
	s.ID = val
}

// SetTarget sets the value of Target.
func (s *GroupListRulesItem) SetTarget(val string) {
	s.Target = val
}

// SetType sets the value of Type.
func (s *GroupListRulesItem) SetType(val GroupListRulesItemType) {
	s.Type = val
}

type GroupListRulesItemType string

const (
	GroupListRulesItemTypeAllow GroupListRulesItemType = "allow"
	GroupListRulesItemTypeDeny  GroupListRulesItemType = "deny"
)

// AllValues returns all GroupListRulesItemType values.
func (GroupListRulesItemType) AllValues() []GroupListRulesItemType {
	return []GroupListRulesItemType{
		GroupListRulesItemTypeAllow,
		GroupListRulesItemTypeDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GroupListRulesItemType) MarshalText() ([]byte, error) {
	switch s {
	case GroupListRulesItemTypeAllow:
		return []byte(s), nil
	case GroupListRulesItemTypeDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GroupListRulesItemType) UnmarshalText(data []byte) error {
	switch GroupListRulesItemType(data) {
	case GroupListRulesItemTypeAllow:
		*s = GroupListRulesItemTypeAllow
		return nil
	case GroupListRulesItemTypeDeny:
		*s = GroupListRulesItemTypeDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GroupListScopesItem string

const (
	GroupListScopesItemUser  GroupListScopesItem = "user.*"
	GroupListScopesItemAdmin GroupListScopesItem = "admin.*"
)

// AllValues returns all GroupListScopesItem values.
func (GroupListScopesItem) AllValues() []GroupListScopesItem {
	return []GroupListScopesItem{
		GroupListScopesItemUser,
		GroupListScopesItemAdmin,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GroupListScopesItem) MarshalText() ([]byte, error) {
	switch s {
	case GroupListScopesItemUser:
		return []byte(s), nil
	case GroupListScopesItemAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GroupListScopesItem) UnmarshalText(data []byte) error {
	switch GroupListScopesItem(data) {
	case GroupListScopesItemUser:
		*s = GroupListScopesItemUser
		return nil
	case GroupListScopesItemAdmin:
		*s = GroupListScopesItemAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/GroupRead
type GroupRead struct {
	ID     string                `json:"id"`
	Scopes []GroupReadScopesItem `json:"scopes"`
	Cidr   string                `json:"cidr"`
	Rules  []GroupReadRulesItem  `json:"rules"`
}

// GetID returns the value of ID.
func (s *GroupRead) GetID() string {
	return s.ID
}

// GetScopes returns the value of Scopes.
func (s *GroupRead) GetScopes() []GroupReadScopesItem {
	return s.Scopes
}

// GetCidr returns the value of Cidr.
func (s *GroupRead) GetCidr() string {
	return s.Cidr
}

// GetRules returns the value of Rules.
func (s *GroupRead) GetRules() []GroupReadRulesItem {
	return s.Rules
}

// SetID sets the value of ID.
func (s *GroupRead) SetID(val string) {
	s.ID = val
}

// SetScopes sets the value of Scopes.
func (s *GroupRead) SetScopes(val []GroupReadScopesItem) {
	s.Scopes = val
}

// SetCidr sets the value of Cidr.
func (s *GroupRead) SetCidr(val string) {
	s.Cidr = val
}

// SetRules sets the value of Rules.
func (s *GroupRead) SetRules(val []GroupReadRulesItem) {
	s.Rules = val
}

func (*GroupRead) readGroupRes() {}

type GroupReadRulesItem struct {
	ID     string                 `json:"id"`
	Target string                 `json:"target"`
	Type   GroupReadRulesItemType `json:"type"`
}

// GetID returns the value of ID.
func (s *GroupReadRulesItem) GetID() string {
	return s.ID
}

// GetTarget returns the value of Target.
func (s *GroupReadRulesItem) GetTarget() string {
	return s.Target
}

// GetType returns the value of Type.
func (s *GroupReadRulesItem) GetType() GroupReadRulesItemType {
	return s.Type
}

// SetID sets the value of ID.
func (s *GroupReadRulesItem) SetID(val string) {
	s.ID = val
}

// SetTarget sets the value of Target.
func (s *GroupReadRulesItem) SetTarget(val string) {
	s.Target = val
}

// SetType sets the value of Type.
func (s *GroupReadRulesItem) SetType(val GroupReadRulesItemType) {
	s.Type = val
}

type GroupReadRulesItemType string

const (
	GroupReadRulesItemTypeAllow GroupReadRulesItemType = "allow"
	GroupReadRulesItemTypeDeny  GroupReadRulesItemType = "deny"
)

// AllValues returns all GroupReadRulesItemType values.
func (GroupReadRulesItemType) AllValues() []GroupReadRulesItemType {
	return []GroupReadRulesItemType{
		GroupReadRulesItemTypeAllow,
		GroupReadRulesItemTypeDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GroupReadRulesItemType) MarshalText() ([]byte, error) {
	switch s {
	case GroupReadRulesItemTypeAllow:
		return []byte(s), nil
	case GroupReadRulesItemTypeDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GroupReadRulesItemType) UnmarshalText(data []byte) error {
	switch GroupReadRulesItemType(data) {
	case GroupReadRulesItemTypeAllow:
		*s = GroupReadRulesItemTypeAllow
		return nil
	case GroupReadRulesItemTypeDeny:
		*s = GroupReadRulesItemTypeDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GroupReadScopesItem string

const (
	GroupReadScopesItemUser  GroupReadScopesItem = "user.*"
	GroupReadScopesItemAdmin GroupReadScopesItem = "admin.*"
)

// AllValues returns all GroupReadScopesItem values.
func (GroupReadScopesItem) AllValues() []GroupReadScopesItem {
	return []GroupReadScopesItem{
		GroupReadScopesItemUser,
		GroupReadScopesItemAdmin,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GroupReadScopesItem) MarshalText() ([]byte, error) {
	switch s {
	case GroupReadScopesItemUser:
		return []byte(s), nil
	case GroupReadScopesItemAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GroupReadScopesItem) UnmarshalText(data []byte) error {
	switch GroupReadScopesItem(data) {
	case GroupReadScopesItemUser:
		*s = GroupReadScopesItemUser
		return nil
	case GroupReadScopesItemAdmin:
		*s = GroupReadScopesItemAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Group_UsersList
type GroupUsersList struct {
	ID             string    `json:"id"`
	Email          string    `json:"email"`
	Firstname      string    `json:"firstname"`
	Lastname       string    `json:"lastname"`
	Provider       string    `json:"provider"`
	PhotoURL       OptString `json:"photo_url"`
	Disabled       bool      `json:"disabled"`
	DisabledReason OptString `json:"disabled_reason"`
}

// GetID returns the value of ID.
func (s *GroupUsersList) GetID() string {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *GroupUsersList) GetEmail() string {
	return s.Email
}

// GetFirstname returns the value of Firstname.
func (s *GroupUsersList) GetFirstname() string {
	return s.Firstname
}

// GetLastname returns the value of Lastname.
func (s *GroupUsersList) GetLastname() string {
	return s.Lastname
}

// GetProvider returns the value of Provider.
func (s *GroupUsersList) GetProvider() string {
	return s.Provider
}

// GetPhotoURL returns the value of PhotoURL.
func (s *GroupUsersList) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetDisabled returns the value of Disabled.
func (s *GroupUsersList) GetDisabled() bool {
	return s.Disabled
}

// GetDisabledReason returns the value of DisabledReason.
func (s *GroupUsersList) GetDisabledReason() OptString {
	return s.DisabledReason
}

// SetID sets the value of ID.
func (s *GroupUsersList) SetID(val string) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *GroupUsersList) SetEmail(val string) {
	s.Email = val
}

// SetFirstname sets the value of Firstname.
func (s *GroupUsersList) SetFirstname(val string) {
	s.Firstname = val
}

// SetLastname sets the value of Lastname.
func (s *GroupUsersList) SetLastname(val string) {
	s.Lastname = val
}

// SetProvider sets the value of Provider.
func (s *GroupUsersList) SetProvider(val string) {
	s.Provider = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *GroupUsersList) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetDisabled sets the value of Disabled.
func (s *GroupUsersList) SetDisabled(val bool) {
	s.Disabled = val
}

// SetDisabledReason sets the value of DisabledReason.
func (s *GroupUsersList) SetDisabledReason(val OptString) {
	s.DisabledReason = val
}

// ListApiKeyOKHeaders wraps []ApiKeyList with response headers.
type ListApiKeyOKHeaders struct {
	XTotal   int
	Response []ApiKeyList
}

// GetXTotal returns the value of XTotal.
func (s *ListApiKeyOKHeaders) GetXTotal() int {
	return s.XTotal
}

// GetResponse returns the value of Response.
func (s *ListApiKeyOKHeaders) GetResponse() []ApiKeyList {
	return s.Response
}

// SetXTotal sets the value of XTotal.
func (s *ListApiKeyOKHeaders) SetXTotal(val int) {
	s.XTotal = val
}

// SetResponse sets the value of Response.
func (s *ListApiKeyOKHeaders) SetResponse(val []ApiKeyList) {
	s.Response = val
}

func (*ListApiKeyOKHeaders) listApiKeyRes() {}

// ListDeviceOKHeaders wraps []DeviceList with response headers.
type ListDeviceOKHeaders struct {
	XTotal   int
	Response []DeviceList
}

// GetXTotal returns the value of XTotal.
func (s *ListDeviceOKHeaders) GetXTotal() int {
	return s.XTotal
}

// GetResponse returns the value of Response.
func (s *ListDeviceOKHeaders) GetResponse() []DeviceList {
	return s.Response
}

// SetXTotal sets the value of XTotal.
func (s *ListDeviceOKHeaders) SetXTotal(val int) {
	s.XTotal = val
}

// SetResponse sets the value of Response.
func (s *ListDeviceOKHeaders) SetResponse(val []DeviceList) {
	s.Response = val
}

func (*ListDeviceOKHeaders) listDeviceRes() {}

// ListGroupOKHeaders wraps []GroupList with response headers.
type ListGroupOKHeaders struct {
	XTotal   int
	Response []GroupList
}

// GetXTotal returns the value of XTotal.
func (s *ListGroupOKHeaders) GetXTotal() int {
	return s.XTotal
}

// GetResponse returns the value of Response.
func (s *ListGroupOKHeaders) GetResponse() []GroupList {
	return s.Response
}

// SetXTotal sets the value of XTotal.
func (s *ListGroupOKHeaders) SetXTotal(val int) {
	s.XTotal = val
}

// SetResponse sets the value of Response.
func (s *ListGroupOKHeaders) SetResponse(val []GroupList) {
	s.Response = val
}

func (*ListGroupOKHeaders) listGroupRes() {}

// ListGroupUsersOKHeaders wraps []GroupUsersList with response headers.
type ListGroupUsersOKHeaders struct {
	XTotal   int
	Response []GroupUsersList
}

// GetXTotal returns the value of XTotal.
func (s *ListGroupUsersOKHeaders) GetXTotal() int {
	return s.XTotal
}

// GetResponse returns the value of Response.
func (s *ListGroupUsersOKHeaders) GetResponse() []GroupUsersList {
	return s.Response
}

// SetXTotal sets the value of XTotal.
func (s *ListGroupUsersOKHeaders) SetXTotal(val int) {
	s.XTotal = val
}

// SetResponse sets the value of Response.
func (s *ListGroupUsersOKHeaders) SetResponse(val []GroupUsersList) {
	s.Response = val
}

func (*ListGroupUsersOKHeaders) listGroupUsersRes() {}

// ListUserDevicesOKHeaders wraps []UserDevicesList with response headers.
type ListUserDevicesOKHeaders struct {
	XTotal   int
	Response []UserDevicesList
}

// GetXTotal returns the value of XTotal.
func (s *ListUserDevicesOKHeaders) GetXTotal() int {
	return s.XTotal
}

// GetResponse returns the value of Response.
func (s *ListUserDevicesOKHeaders) GetResponse() []UserDevicesList {
	return s.Response
}

// SetXTotal sets the value of XTotal.
func (s *ListUserDevicesOKHeaders) SetXTotal(val int) {
	s.XTotal = val
}

// SetResponse sets the value of Response.
func (s *ListUserDevicesOKHeaders) SetResponse(val []UserDevicesList) {
	s.Response = val
}

func (*ListUserDevicesOKHeaders) listUserDevicesRes() {}

// ListUserKeysOKHeaders wraps []UserKeysList with response headers.
type ListUserKeysOKHeaders struct {
	XTotal   int
	Response []UserKeysList
}

// GetXTotal returns the value of XTotal.
func (s *ListUserKeysOKHeaders) GetXTotal() int {
	return s.XTotal
}

// GetResponse returns the value of Response.
func (s *ListUserKeysOKHeaders) GetResponse() []UserKeysList {
	return s.Response
}

// SetXTotal sets the value of XTotal.
func (s *ListUserKeysOKHeaders) SetXTotal(val int) {
	s.XTotal = val
}

// SetResponse sets the value of Response.
func (s *ListUserKeysOKHeaders) SetResponse(val []UserKeysList) {
	s.Response = val
}

func (*ListUserKeysOKHeaders) listUserKeysRes() {}

// ListUserOKHeaders wraps []UserList with response headers.
type ListUserOKHeaders struct {
	XTotal   int
	Response []UserList
}

// GetXTotal returns the value of XTotal.
func (s *ListUserOKHeaders) GetXTotal() int {
	return s.XTotal
}

// GetResponse returns the value of Response.
func (s *ListUserOKHeaders) GetResponse() []UserList {
	return s.Response
}

// SetXTotal sets the value of XTotal.
func (s *ListUserOKHeaders) SetXTotal(val int) {
	s.XTotal = val
}

// SetResponse sets the value of Response.
func (s *ListUserOKHeaders) SetResponse(val []UserList) {
	s.Response = val
}

func (*ListUserOKHeaders) listUserRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGoogleAuthCallbackReq returns new OptGoogleAuthCallbackReq with value set to v.
func NewOptGoogleAuthCallbackReq(v GoogleAuthCallbackReq) OptGoogleAuthCallbackReq {
	return OptGoogleAuthCallbackReq{
		Value: v,
		Set:   true,
	}
}

// OptGoogleAuthCallbackReq is optional GoogleAuthCallbackReq.
type OptGoogleAuthCallbackReq struct {
	Value GoogleAuthCallbackReq
	Set   bool
}

// IsSet returns true if OptGoogleAuthCallbackReq was set.
func (o OptGoogleAuthCallbackReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGoogleAuthCallbackReq) Reset() {
	var v GoogleAuthCallbackReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGoogleAuthCallbackReq) SetTo(v GoogleAuthCallbackReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGoogleAuthCallbackReq) Get() (v GoogleAuthCallbackReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGoogleAuthCallbackReq) Or(d GoogleAuthCallbackReq) GoogleAuthCallbackReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserpassLoginReq returns new OptUserpassLoginReq with value set to v.
func NewOptUserpassLoginReq(v UserpassLoginReq) OptUserpassLoginReq {
	return OptUserpassLoginReq{
		Value: v,
		Set:   true,
	}
}

// OptUserpassLoginReq is optional UserpassLoginReq.
type OptUserpassLoginReq struct {
	Value UserpassLoginReq
	Set   bool
}

// IsSet returns true if OptUserpassLoginReq was set.
func (o OptUserpassLoginReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserpassLoginReq) Reset() {
	var v UserpassLoginReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserpassLoginReq) SetTo(v UserpassLoginReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserpassLoginReq) Get() (v UserpassLoginReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserpassLoginReq) Or(d UserpassLoginReq) UserpassLoginReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type R400 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R400) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R400) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R400) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R400) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R400) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R400) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R400) createApiKeyRes()    {}
func (*R400) createDeviceRes()    {}
func (*R400) createGroupRes()     {}
func (*R400) createUserRes()      {}
func (*R400) deleteApiKeyRes()    {}
func (*R400) deleteDeviceRes()    {}
func (*R400) deleteGroupRes()     {}
func (*R400) deleteUserRes()      {}
func (*R400) listApiKeyRes()      {}
func (*R400) listDeviceRes()      {}
func (*R400) listGroupRes()       {}
func (*R400) listGroupUsersRes()  {}
func (*R400) listUserDevicesRes() {}
func (*R400) listUserKeysRes()    {}
func (*R400) listUserRes()        {}
func (*R400) readApiKeyRes()      {}
func (*R400) readApiKeyUserRes()  {}
func (*R400) readDeviceRes()      {}
func (*R400) readDeviceUserRes()  {}
func (*R400) readGroupRes()       {}
func (*R400) readUserGroupRes()   {}
func (*R400) readUserRes()        {}
func (*R400) updateDeviceRes()    {}
func (*R400) updateUserRes()      {}

type R404 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R404) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R404) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R404) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R404) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R404) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R404) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R404) deleteApiKeyRes()    {}
func (*R404) deleteDeviceRes()    {}
func (*R404) deleteGroupRes()     {}
func (*R404) deleteUserRes()      {}
func (*R404) listApiKeyRes()      {}
func (*R404) listDeviceRes()      {}
func (*R404) listGroupRes()       {}
func (*R404) listGroupUsersRes()  {}
func (*R404) listUserDevicesRes() {}
func (*R404) listUserKeysRes()    {}
func (*R404) listUserRes()        {}
func (*R404) readApiKeyRes()      {}
func (*R404) readApiKeyUserRes()  {}
func (*R404) readDeviceRes()      {}
func (*R404) readDeviceUserRes()  {}
func (*R404) readGroupRes()       {}
func (*R404) readUserGroupRes()   {}
func (*R404) readUserRes()        {}
func (*R404) updateDeviceRes()    {}
func (*R404) updateUserRes()      {}

type R409 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R409) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R409) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R409) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R409) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R409) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R409) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R409) createApiKeyRes()    {}
func (*R409) createDeviceRes()    {}
func (*R409) createGroupRes()     {}
func (*R409) createUserRes()      {}
func (*R409) deleteApiKeyRes()    {}
func (*R409) deleteDeviceRes()    {}
func (*R409) deleteGroupRes()     {}
func (*R409) deleteUserRes()      {}
func (*R409) listApiKeyRes()      {}
func (*R409) listDeviceRes()      {}
func (*R409) listGroupRes()       {}
func (*R409) listGroupUsersRes()  {}
func (*R409) listUserDevicesRes() {}
func (*R409) listUserKeysRes()    {}
func (*R409) listUserRes()        {}
func (*R409) readApiKeyRes()      {}
func (*R409) readApiKeyUserRes()  {}
func (*R409) readDeviceRes()      {}
func (*R409) readDeviceUserRes()  {}
func (*R409) readGroupRes()       {}
func (*R409) readUserGroupRes()   {}
func (*R409) readUserRes()        {}
func (*R409) updateDeviceRes()    {}
func (*R409) updateUserRes()      {}

type R500 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R500) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R500) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R500) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R500) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R500) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R500) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R500) createApiKeyRes()    {}
func (*R500) createDeviceRes()    {}
func (*R500) createGroupRes()     {}
func (*R500) createUserRes()      {}
func (*R500) deleteApiKeyRes()    {}
func (*R500) deleteDeviceRes()    {}
func (*R500) deleteGroupRes()     {}
func (*R500) deleteUserRes()      {}
func (*R500) listApiKeyRes()      {}
func (*R500) listDeviceRes()      {}
func (*R500) listGroupRes()       {}
func (*R500) listGroupUsersRes()  {}
func (*R500) listUserDevicesRes() {}
func (*R500) listUserKeysRes()    {}
func (*R500) listUserRes()        {}
func (*R500) readApiKeyRes()      {}
func (*R500) readApiKeyUserRes()  {}
func (*R500) readDeviceRes()      {}
func (*R500) readDeviceUserRes()  {}
func (*R500) readGroupRes()       {}
func (*R500) readUserGroupRes()   {}
func (*R500) readUserRes()        {}
func (*R500) updateDeviceRes()    {}
func (*R500) updateUserRes()      {}

// StatusBadRequest is response for Status operation.
type StatusBadRequest struct{}

func (*StatusBadRequest) statusRes() {}

type StatusOKApplicationJSON jx.Raw

func (*StatusOKApplicationJSON) statusRes() {}

// StatusUnauthorized is response for Status operation.
type StatusUnauthorized struct{}

func (*StatusUnauthorized) statusRes() {}

type UpdateDeviceReq struct {
	Name        OptString `json:"name"`
	Description OptString `json:"description"`
	Type        OptString `json:"type"`
	Endpoint    OptString `json:"endpoint"`
	AllowedIps  OptString `json:"allowed_ips"`
	User        OptString `json:"user"`
}

// GetName returns the value of Name.
func (s *UpdateDeviceReq) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *UpdateDeviceReq) GetDescription() OptString {
	return s.Description
}

// GetType returns the value of Type.
func (s *UpdateDeviceReq) GetType() OptString {
	return s.Type
}

// GetEndpoint returns the value of Endpoint.
func (s *UpdateDeviceReq) GetEndpoint() OptString {
	return s.Endpoint
}

// GetAllowedIps returns the value of AllowedIps.
func (s *UpdateDeviceReq) GetAllowedIps() OptString {
	return s.AllowedIps
}

// GetUser returns the value of User.
func (s *UpdateDeviceReq) GetUser() OptString {
	return s.User
}

// SetName sets the value of Name.
func (s *UpdateDeviceReq) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *UpdateDeviceReq) SetDescription(val OptString) {
	s.Description = val
}

// SetType sets the value of Type.
func (s *UpdateDeviceReq) SetType(val OptString) {
	s.Type = val
}

// SetEndpoint sets the value of Endpoint.
func (s *UpdateDeviceReq) SetEndpoint(val OptString) {
	s.Endpoint = val
}

// SetAllowedIps sets the value of AllowedIps.
func (s *UpdateDeviceReq) SetAllowedIps(val OptString) {
	s.AllowedIps = val
}

// SetUser sets the value of User.
func (s *UpdateDeviceReq) SetUser(val OptString) {
	s.User = val
}

type UpdateUserReq struct {
	Email          OptString `json:"email"`
	Firstname      OptString `json:"firstname"`
	Lastname       OptString `json:"lastname"`
	Password       OptString `json:"password"`
	Salt           OptString `json:"salt"`
	PhotoURL       OptString `json:"photo_url"`
	Disabled       OptBool   `json:"disabled"`
	DisabledReason OptString `json:"disabled_reason"`
	Group          OptString `json:"group"`
	Devices        []int     `json:"devices"`
	Keys           []int     `json:"keys"`
}

// GetEmail returns the value of Email.
func (s *UpdateUserReq) GetEmail() OptString {
	return s.Email
}

// GetFirstname returns the value of Firstname.
func (s *UpdateUserReq) GetFirstname() OptString {
	return s.Firstname
}

// GetLastname returns the value of Lastname.
func (s *UpdateUserReq) GetLastname() OptString {
	return s.Lastname
}

// GetPassword returns the value of Password.
func (s *UpdateUserReq) GetPassword() OptString {
	return s.Password
}

// GetSalt returns the value of Salt.
func (s *UpdateUserReq) GetSalt() OptString {
	return s.Salt
}

// GetPhotoURL returns the value of PhotoURL.
func (s *UpdateUserReq) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetDisabled returns the value of Disabled.
func (s *UpdateUserReq) GetDisabled() OptBool {
	return s.Disabled
}

// GetDisabledReason returns the value of DisabledReason.
func (s *UpdateUserReq) GetDisabledReason() OptString {
	return s.DisabledReason
}

// GetGroup returns the value of Group.
func (s *UpdateUserReq) GetGroup() OptString {
	return s.Group
}

// GetDevices returns the value of Devices.
func (s *UpdateUserReq) GetDevices() []int {
	return s.Devices
}

// GetKeys returns the value of Keys.
func (s *UpdateUserReq) GetKeys() []int {
	return s.Keys
}

// SetEmail sets the value of Email.
func (s *UpdateUserReq) SetEmail(val OptString) {
	s.Email = val
}

// SetFirstname sets the value of Firstname.
func (s *UpdateUserReq) SetFirstname(val OptString) {
	s.Firstname = val
}

// SetLastname sets the value of Lastname.
func (s *UpdateUserReq) SetLastname(val OptString) {
	s.Lastname = val
}

// SetPassword sets the value of Password.
func (s *UpdateUserReq) SetPassword(val OptString) {
	s.Password = val
}

// SetSalt sets the value of Salt.
func (s *UpdateUserReq) SetSalt(val OptString) {
	s.Salt = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *UpdateUserReq) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetDisabled sets the value of Disabled.
func (s *UpdateUserReq) SetDisabled(val OptBool) {
	s.Disabled = val
}

// SetDisabledReason sets the value of DisabledReason.
func (s *UpdateUserReq) SetDisabledReason(val OptString) {
	s.DisabledReason = val
}

// SetGroup sets the value of Group.
func (s *UpdateUserReq) SetGroup(val OptString) {
	s.Group = val
}

// SetDevices sets the value of Devices.
func (s *UpdateUserReq) SetDevices(val []int) {
	s.Devices = val
}

// SetKeys sets the value of Keys.
func (s *UpdateUserReq) SetKeys(val []int) {
	s.Keys = val
}

// Ref: #/components/schemas/UserCreate
type UserCreate struct {
	ID             string    `json:"id"`
	Email          string    `json:"email"`
	Firstname      string    `json:"firstname"`
	Lastname       string    `json:"lastname"`
	PhotoURL       OptString `json:"photo_url"`
	Disabled       bool      `json:"disabled"`
	DisabledReason OptString `json:"disabled_reason"`
}

// GetID returns the value of ID.
func (s *UserCreate) GetID() string {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *UserCreate) GetEmail() string {
	return s.Email
}

// GetFirstname returns the value of Firstname.
func (s *UserCreate) GetFirstname() string {
	return s.Firstname
}

// GetLastname returns the value of Lastname.
func (s *UserCreate) GetLastname() string {
	return s.Lastname
}

// GetPhotoURL returns the value of PhotoURL.
func (s *UserCreate) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetDisabled returns the value of Disabled.
func (s *UserCreate) GetDisabled() bool {
	return s.Disabled
}

// GetDisabledReason returns the value of DisabledReason.
func (s *UserCreate) GetDisabledReason() OptString {
	return s.DisabledReason
}

// SetID sets the value of ID.
func (s *UserCreate) SetID(val string) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *UserCreate) SetEmail(val string) {
	s.Email = val
}

// SetFirstname sets the value of Firstname.
func (s *UserCreate) SetFirstname(val string) {
	s.Firstname = val
}

// SetLastname sets the value of Lastname.
func (s *UserCreate) SetLastname(val string) {
	s.Lastname = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *UserCreate) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetDisabled sets the value of Disabled.
func (s *UserCreate) SetDisabled(val bool) {
	s.Disabled = val
}

// SetDisabledReason sets the value of DisabledReason.
func (s *UserCreate) SetDisabledReason(val OptString) {
	s.DisabledReason = val
}

func (*UserCreate) createUserRes() {}

// Ref: #/components/schemas/User_DevicesList
type UserDevicesList struct {
	ID          int       `json:"id"`
	Name        string    `json:"name"`
	Description OptString `json:"description"`
	Type        string    `json:"type"`
	PublicKey   string    `json:"public_key"`
	Endpoint    string    `json:"endpoint"`
	AllowedIps  string    `json:"allowed_ips"`
}

// GetID returns the value of ID.
func (s *UserDevicesList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserDevicesList) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *UserDevicesList) GetDescription() OptString {
	return s.Description
}

// GetType returns the value of Type.
func (s *UserDevicesList) GetType() string {
	return s.Type
}

// GetPublicKey returns the value of PublicKey.
func (s *UserDevicesList) GetPublicKey() string {
	return s.PublicKey
}

// GetEndpoint returns the value of Endpoint.
func (s *UserDevicesList) GetEndpoint() string {
	return s.Endpoint
}

// GetAllowedIps returns the value of AllowedIps.
func (s *UserDevicesList) GetAllowedIps() string {
	return s.AllowedIps
}

// SetID sets the value of ID.
func (s *UserDevicesList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserDevicesList) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *UserDevicesList) SetDescription(val OptString) {
	s.Description = val
}

// SetType sets the value of Type.
func (s *UserDevicesList) SetType(val string) {
	s.Type = val
}

// SetPublicKey sets the value of PublicKey.
func (s *UserDevicesList) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetEndpoint sets the value of Endpoint.
func (s *UserDevicesList) SetEndpoint(val string) {
	s.Endpoint = val
}

// SetAllowedIps sets the value of AllowedIps.
func (s *UserDevicesList) SetAllowedIps(val string) {
	s.AllowedIps = val
}

// Ref: #/components/schemas/User_GroupRead
type UserGroupRead struct {
	ID     string                    `json:"id"`
	Scopes []UserGroupReadScopesItem `json:"scopes"`
	Cidr   string                    `json:"cidr"`
	Rules  []UserGroupReadRulesItem  `json:"rules"`
}

// GetID returns the value of ID.
func (s *UserGroupRead) GetID() string {
	return s.ID
}

// GetScopes returns the value of Scopes.
func (s *UserGroupRead) GetScopes() []UserGroupReadScopesItem {
	return s.Scopes
}

// GetCidr returns the value of Cidr.
func (s *UserGroupRead) GetCidr() string {
	return s.Cidr
}

// GetRules returns the value of Rules.
func (s *UserGroupRead) GetRules() []UserGroupReadRulesItem {
	return s.Rules
}

// SetID sets the value of ID.
func (s *UserGroupRead) SetID(val string) {
	s.ID = val
}

// SetScopes sets the value of Scopes.
func (s *UserGroupRead) SetScopes(val []UserGroupReadScopesItem) {
	s.Scopes = val
}

// SetCidr sets the value of Cidr.
func (s *UserGroupRead) SetCidr(val string) {
	s.Cidr = val
}

// SetRules sets the value of Rules.
func (s *UserGroupRead) SetRules(val []UserGroupReadRulesItem) {
	s.Rules = val
}

func (*UserGroupRead) readUserGroupRes() {}

type UserGroupReadRulesItem struct {
	ID     string                     `json:"id"`
	Target string                     `json:"target"`
	Type   UserGroupReadRulesItemType `json:"type"`
}

// GetID returns the value of ID.
func (s *UserGroupReadRulesItem) GetID() string {
	return s.ID
}

// GetTarget returns the value of Target.
func (s *UserGroupReadRulesItem) GetTarget() string {
	return s.Target
}

// GetType returns the value of Type.
func (s *UserGroupReadRulesItem) GetType() UserGroupReadRulesItemType {
	return s.Type
}

// SetID sets the value of ID.
func (s *UserGroupReadRulesItem) SetID(val string) {
	s.ID = val
}

// SetTarget sets the value of Target.
func (s *UserGroupReadRulesItem) SetTarget(val string) {
	s.Target = val
}

// SetType sets the value of Type.
func (s *UserGroupReadRulesItem) SetType(val UserGroupReadRulesItemType) {
	s.Type = val
}

type UserGroupReadRulesItemType string

const (
	UserGroupReadRulesItemTypeAllow UserGroupReadRulesItemType = "allow"
	UserGroupReadRulesItemTypeDeny  UserGroupReadRulesItemType = "deny"
)

// AllValues returns all UserGroupReadRulesItemType values.
func (UserGroupReadRulesItemType) AllValues() []UserGroupReadRulesItemType {
	return []UserGroupReadRulesItemType{
		UserGroupReadRulesItemTypeAllow,
		UserGroupReadRulesItemTypeDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserGroupReadRulesItemType) MarshalText() ([]byte, error) {
	switch s {
	case UserGroupReadRulesItemTypeAllow:
		return []byte(s), nil
	case UserGroupReadRulesItemTypeDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserGroupReadRulesItemType) UnmarshalText(data []byte) error {
	switch UserGroupReadRulesItemType(data) {
	case UserGroupReadRulesItemTypeAllow:
		*s = UserGroupReadRulesItemTypeAllow
		return nil
	case UserGroupReadRulesItemTypeDeny:
		*s = UserGroupReadRulesItemTypeDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserGroupReadScopesItem string

const (
	UserGroupReadScopesItemUser  UserGroupReadScopesItem = "user.*"
	UserGroupReadScopesItemAdmin UserGroupReadScopesItem = "admin.*"
)

// AllValues returns all UserGroupReadScopesItem values.
func (UserGroupReadScopesItem) AllValues() []UserGroupReadScopesItem {
	return []UserGroupReadScopesItem{
		UserGroupReadScopesItemUser,
		UserGroupReadScopesItemAdmin,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserGroupReadScopesItem) MarshalText() ([]byte, error) {
	switch s {
	case UserGroupReadScopesItemUser:
		return []byte(s), nil
	case UserGroupReadScopesItemAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserGroupReadScopesItem) UnmarshalText(data []byte) error {
	switch UserGroupReadScopesItem(data) {
	case UserGroupReadScopesItemUser:
		*s = UserGroupReadScopesItemUser
		return nil
	case UserGroupReadScopesItemAdmin:
		*s = UserGroupReadScopesItemAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/User_KeysList
type UserKeysList struct {
	ID     int                      `json:"id"`
	Name   string                   `json:"name"`
	Scopes []UserKeysListScopesItem `json:"scopes"`
}

// GetID returns the value of ID.
func (s *UserKeysList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserKeysList) GetName() string {
	return s.Name
}

// GetScopes returns the value of Scopes.
func (s *UserKeysList) GetScopes() []UserKeysListScopesItem {
	return s.Scopes
}

// SetID sets the value of ID.
func (s *UserKeysList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserKeysList) SetName(val string) {
	s.Name = val
}

// SetScopes sets the value of Scopes.
func (s *UserKeysList) SetScopes(val []UserKeysListScopesItem) {
	s.Scopes = val
}

type UserKeysListScopesItem string

const (
	UserKeysListScopesItemUser  UserKeysListScopesItem = "user.*"
	UserKeysListScopesItemAdmin UserKeysListScopesItem = "admin.*"
)

// AllValues returns all UserKeysListScopesItem values.
func (UserKeysListScopesItem) AllValues() []UserKeysListScopesItem {
	return []UserKeysListScopesItem{
		UserKeysListScopesItemUser,
		UserKeysListScopesItemAdmin,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserKeysListScopesItem) MarshalText() ([]byte, error) {
	switch s {
	case UserKeysListScopesItemUser:
		return []byte(s), nil
	case UserKeysListScopesItemAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserKeysListScopesItem) UnmarshalText(data []byte) error {
	switch UserKeysListScopesItem(data) {
	case UserKeysListScopesItemUser:
		*s = UserKeysListScopesItemUser
		return nil
	case UserKeysListScopesItemAdmin:
		*s = UserKeysListScopesItemAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UserList
type UserList struct {
	ID             string    `json:"id"`
	Email          string    `json:"email"`
	Firstname      string    `json:"firstname"`
	Lastname       string    `json:"lastname"`
	Provider       string    `json:"provider"`
	PhotoURL       OptString `json:"photo_url"`
	Disabled       bool      `json:"disabled"`
	DisabledReason OptString `json:"disabled_reason"`
}

// GetID returns the value of ID.
func (s *UserList) GetID() string {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *UserList) GetEmail() string {
	return s.Email
}

// GetFirstname returns the value of Firstname.
func (s *UserList) GetFirstname() string {
	return s.Firstname
}

// GetLastname returns the value of Lastname.
func (s *UserList) GetLastname() string {
	return s.Lastname
}

// GetProvider returns the value of Provider.
func (s *UserList) GetProvider() string {
	return s.Provider
}

// GetPhotoURL returns the value of PhotoURL.
func (s *UserList) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetDisabled returns the value of Disabled.
func (s *UserList) GetDisabled() bool {
	return s.Disabled
}

// GetDisabledReason returns the value of DisabledReason.
func (s *UserList) GetDisabledReason() OptString {
	return s.DisabledReason
}

// SetID sets the value of ID.
func (s *UserList) SetID(val string) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *UserList) SetEmail(val string) {
	s.Email = val
}

// SetFirstname sets the value of Firstname.
func (s *UserList) SetFirstname(val string) {
	s.Firstname = val
}

// SetLastname sets the value of Lastname.
func (s *UserList) SetLastname(val string) {
	s.Lastname = val
}

// SetProvider sets the value of Provider.
func (s *UserList) SetProvider(val string) {
	s.Provider = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *UserList) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetDisabled sets the value of Disabled.
func (s *UserList) SetDisabled(val bool) {
	s.Disabled = val
}

// SetDisabledReason sets the value of DisabledReason.
func (s *UserList) SetDisabledReason(val OptString) {
	s.DisabledReason = val
}

// Ref: #/components/schemas/UserRead
type UserRead struct {
	ID             string    `json:"id"`
	Email          string    `json:"email"`
	Firstname      string    `json:"firstname"`
	Lastname       string    `json:"lastname"`
	Provider       string    `json:"provider"`
	PhotoURL       OptString `json:"photo_url"`
	Disabled       bool      `json:"disabled"`
	DisabledReason OptString `json:"disabled_reason"`
}

// GetID returns the value of ID.
func (s *UserRead) GetID() string {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *UserRead) GetEmail() string {
	return s.Email
}

// GetFirstname returns the value of Firstname.
func (s *UserRead) GetFirstname() string {
	return s.Firstname
}

// GetLastname returns the value of Lastname.
func (s *UserRead) GetLastname() string {
	return s.Lastname
}

// GetProvider returns the value of Provider.
func (s *UserRead) GetProvider() string {
	return s.Provider
}

// GetPhotoURL returns the value of PhotoURL.
func (s *UserRead) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetDisabled returns the value of Disabled.
func (s *UserRead) GetDisabled() bool {
	return s.Disabled
}

// GetDisabledReason returns the value of DisabledReason.
func (s *UserRead) GetDisabledReason() OptString {
	return s.DisabledReason
}

// SetID sets the value of ID.
func (s *UserRead) SetID(val string) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *UserRead) SetEmail(val string) {
	s.Email = val
}

// SetFirstname sets the value of Firstname.
func (s *UserRead) SetFirstname(val string) {
	s.Firstname = val
}

// SetLastname sets the value of Lastname.
func (s *UserRead) SetLastname(val string) {
	s.Lastname = val
}

// SetProvider sets the value of Provider.
func (s *UserRead) SetProvider(val string) {
	s.Provider = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *UserRead) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetDisabled sets the value of Disabled.
func (s *UserRead) SetDisabled(val bool) {
	s.Disabled = val
}

// SetDisabledReason sets the value of DisabledReason.
func (s *UserRead) SetDisabledReason(val OptString) {
	s.DisabledReason = val
}

func (*UserRead) readUserRes() {}

// Ref: #/components/schemas/UserUpdate
type UserUpdate struct {
	ID             string    `json:"id"`
	Email          string    `json:"email"`
	Firstname      string    `json:"firstname"`
	Lastname       string    `json:"lastname"`
	PhotoURL       OptString `json:"photo_url"`
	Disabled       bool      `json:"disabled"`
	DisabledReason OptString `json:"disabled_reason"`
}

// GetID returns the value of ID.
func (s *UserUpdate) GetID() string {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *UserUpdate) GetEmail() string {
	return s.Email
}

// GetFirstname returns the value of Firstname.
func (s *UserUpdate) GetFirstname() string {
	return s.Firstname
}

// GetLastname returns the value of Lastname.
func (s *UserUpdate) GetLastname() string {
	return s.Lastname
}

// GetPhotoURL returns the value of PhotoURL.
func (s *UserUpdate) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetDisabled returns the value of Disabled.
func (s *UserUpdate) GetDisabled() bool {
	return s.Disabled
}

// GetDisabledReason returns the value of DisabledReason.
func (s *UserUpdate) GetDisabledReason() OptString {
	return s.DisabledReason
}

// SetID sets the value of ID.
func (s *UserUpdate) SetID(val string) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *UserUpdate) SetEmail(val string) {
	s.Email = val
}

// SetFirstname sets the value of Firstname.
func (s *UserUpdate) SetFirstname(val string) {
	s.Firstname = val
}

// SetLastname sets the value of Lastname.
func (s *UserUpdate) SetLastname(val string) {
	s.Lastname = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *UserUpdate) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetDisabled sets the value of Disabled.
func (s *UserUpdate) SetDisabled(val bool) {
	s.Disabled = val
}

// SetDisabledReason sets the value of DisabledReason.
func (s *UserUpdate) SetDisabledReason(val OptString) {
	s.DisabledReason = val
}

func (*UserUpdate) updateUserRes() {}

// UserpassLoginBadRequest is response for UserpassLogin operation.
type UserpassLoginBadRequest struct{}

func (*UserpassLoginBadRequest) userpassLoginRes() {}

// UserpassLoginOK is response for UserpassLogin operation.
type UserpassLoginOK struct {
	SetCookie OptString
}

// GetSetCookie returns the value of SetCookie.
func (s *UserpassLoginOK) GetSetCookie() OptString {
	return s.SetCookie
}

// SetSetCookie sets the value of SetCookie.
func (s *UserpassLoginOK) SetSetCookie(val OptString) {
	s.SetCookie = val
}

func (*UserpassLoginOK) userpassLoginRes() {}

type UserpassLoginReq struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *UserpassLoginReq) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *UserpassLoginReq) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *UserpassLoginReq) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *UserpassLoginReq) SetPassword(val string) {
	s.Password = val
}

// UserpassLoginUnauthorized is response for UserpassLogin operation.
type UserpassLoginUnauthorized struct{}

func (*UserpassLoginUnauthorized) userpassLoginRes() {}
