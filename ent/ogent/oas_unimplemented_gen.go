// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// CreateApiKey implements createApiKey operation.
//
// Creates a new ApiKey and persists it to storage.
//
// POST /api-keys
func (UnimplementedHandler) CreateApiKey(ctx context.Context, req *CreateApiKeyReq) (r CreateApiKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateDevice implements createDevice operation.
//
// Creates a new Device and persists it to storage.
//
// POST /devices
func (UnimplementedHandler) CreateDevice(ctx context.Context, req *CreateDeviceReq) (r CreateDeviceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateGroup implements createGroup operation.
//
// Creates a new Group and persists it to storage.
//
// POST /groups
func (UnimplementedHandler) CreateGroup(ctx context.Context, req *CreateGroupReq) (r CreateGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateUser implements createUser operation.
//
// Creates a new User and persists it to storage.
//
// POST /users
func (UnimplementedHandler) CreateUser(ctx context.Context, req *CreateUserReq) (r CreateUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteApiKey implements deleteApiKey operation.
//
// Deletes the ApiKey with the requested ID.
//
// DELETE /api-keys/{id}
func (UnimplementedHandler) DeleteApiKey(ctx context.Context, params DeleteApiKeyParams) (r DeleteApiKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteDevice implements deleteDevice operation.
//
// Deletes the Device with the requested ID.
//
// DELETE /devices/{id}
func (UnimplementedHandler) DeleteDevice(ctx context.Context, params DeleteDeviceParams) (r DeleteDeviceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteGroup implements deleteGroup operation.
//
// Deletes the Group with the requested ID.
//
// DELETE /groups/{id}
func (UnimplementedHandler) DeleteGroup(ctx context.Context, params DeleteGroupParams) (r DeleteGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteUser implements deleteUser operation.
//
// Deletes the User with the requested ID.
//
// DELETE /users/{id}
func (UnimplementedHandler) DeleteUser(ctx context.Context, params DeleteUserParams) (r DeleteUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GoogleAuthCallback implements googleAuthCallback operation.
//
// POST /auth/google/callback
func (UnimplementedHandler) GoogleAuthCallback(ctx context.Context, req OptGoogleAuthCallbackReq) (r GoogleAuthCallbackRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GoogleAuthStart implements googleAuthStart operation.
//
// GET /auth/google/start
func (UnimplementedHandler) GoogleAuthStart(ctx context.Context, params GoogleAuthStartParams) (r GoogleAuthStartRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GoogleAuthSync implements googleAuthSync operation.
//
// Synchronize users for the google provider.
//
// GET /auth/google/sync
func (UnimplementedHandler) GoogleAuthSync(ctx context.Context) (r GoogleAuthSyncRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListApiKey implements listApiKey operation.
//
// List ApiKeys.
//
// GET /api-keys
func (UnimplementedHandler) ListApiKey(ctx context.Context, params ListApiKeyParams) (r ListApiKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListDevice implements listDevice operation.
//
// List Devices.
//
// GET /devices
func (UnimplementedHandler) ListDevice(ctx context.Context, params ListDeviceParams) (r ListDeviceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListGroup implements listGroup operation.
//
// List Groups.
//
// GET /groups
func (UnimplementedHandler) ListGroup(ctx context.Context, params ListGroupParams) (r ListGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListGroupUsers implements listGroupUsers operation.
//
// List attached Users.
//
// GET /groups/{id}/users
func (UnimplementedHandler) ListGroupUsers(ctx context.Context, params ListGroupUsersParams) (r ListGroupUsersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListUser implements listUser operation.
//
// List Users.
//
// GET /users
func (UnimplementedHandler) ListUser(ctx context.Context, params ListUserParams) (r ListUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListUserDevices implements listUserDevices operation.
//
// List attached Devices.
//
// GET /users/{id}/devices
func (UnimplementedHandler) ListUserDevices(ctx context.Context, params ListUserDevicesParams) (r ListUserDevicesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListUserKeys implements listUserKeys operation.
//
// List attached Keys.
//
// GET /users/{id}/keys
func (UnimplementedHandler) ListUserKeys(ctx context.Context, params ListUserKeysParams) (r ListUserKeysRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadApiKey implements readApiKey operation.
//
// Finds the ApiKey with the requested ID and returns it.
//
// GET /api-keys/{id}
func (UnimplementedHandler) ReadApiKey(ctx context.Context, params ReadApiKeyParams) (r ReadApiKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadApiKeyUser implements readApiKeyUser operation.
//
// Find the attached User of the ApiKey with the given ID.
//
// GET /api-keys/{id}/user
func (UnimplementedHandler) ReadApiKeyUser(ctx context.Context, params ReadApiKeyUserParams) (r ReadApiKeyUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadDevice implements readDevice operation.
//
// Finds the Device with the requested ID and returns it.
//
// GET /devices/{id}
func (UnimplementedHandler) ReadDevice(ctx context.Context, params ReadDeviceParams) (r ReadDeviceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadDeviceUser implements readDeviceUser operation.
//
// Find the attached User of the Device with the given ID.
//
// GET /devices/{id}/user
func (UnimplementedHandler) ReadDeviceUser(ctx context.Context, params ReadDeviceUserParams) (r ReadDeviceUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadGroup implements readGroup operation.
//
// Finds the Group with the requested ID and returns it.
//
// GET /groups/{id}
func (UnimplementedHandler) ReadGroup(ctx context.Context, params ReadGroupParams) (r ReadGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadUser implements readUser operation.
//
// Finds the User with the requested ID and returns it.
//
// GET /users/{id}
func (UnimplementedHandler) ReadUser(ctx context.Context, params ReadUserParams) (r ReadUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadUserGroup implements readUserGroup operation.
//
// Find the attached Group of the User with the given ID.
//
// GET /users/{id}/group
func (UnimplementedHandler) ReadUserGroup(ctx context.Context, params ReadUserGroupParams) (r ReadUserGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Status implements status operation.
//
// Ping the database and report.
//
// GET /status
func (UnimplementedHandler) Status(ctx context.Context) (r StatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateDevice implements updateDevice operation.
//
// Updates a Device and persists changes to storage.
//
// PATCH /devices/{id}
func (UnimplementedHandler) UpdateDevice(ctx context.Context, req *UpdateDeviceReq, params UpdateDeviceParams) (r UpdateDeviceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateUser implements updateUser operation.
//
// Updates a User and persists changes to storage.
//
// PATCH /users/{id}
func (UnimplementedHandler) UpdateUser(ctx context.Context, req *UpdateUserReq, params UpdateUserParams) (r UpdateUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UserpassLogin implements userpassLogin operation.
//
// Login with a user and password.
//
// POST /auth/userpass/login
func (UnimplementedHandler) UserpassLogin(ctx context.Context, req OptUserpassLoginReq) (r UserpassLoginRes, _ error) {
	return r, ht.ErrNotImplemented
}
