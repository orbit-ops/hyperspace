// Code generated by ent, DO NOT EDIT.

package device

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the device type in the database.
	Label = "device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDNS holds the string denoting the dns field in the database.
	FieldDNS = "dns"
	// FieldPublicKey holds the string denoting the public_key field in the database.
	FieldPublicKey = "public_key"
	// FieldPresharedKey holds the string denoting the preshared_key field in the database.
	FieldPresharedKey = "preshared_key"
	// FieldKeepAlive holds the string denoting the keep_alive field in the database.
	FieldKeepAlive = "keep_alive"
	// FieldEndpoint holds the string denoting the endpoint field in the database.
	FieldEndpoint = "endpoint"
	// FieldAllowedIps holds the string denoting the allowed_ips field in the database.
	FieldAllowedIps = "allowed_ips"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the device in the database.
	Table = "devices"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "devices"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_devices"
)

// Columns holds all SQL columns for device fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldType,
	FieldDNS,
	FieldPublicKey,
	FieldPresharedKey,
	FieldKeepAlive,
	FieldEndpoint,
	FieldAllowedIps,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "devices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_devices",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Device queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDNS orders the results by the dns field.
func ByDNS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDNS, opts...).ToFunc()
}

// ByPublicKey orders the results by the public_key field.
func ByPublicKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicKey, opts...).ToFunc()
}

// ByPresharedKey orders the results by the preshared_key field.
func ByPresharedKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPresharedKey, opts...).ToFunc()
}

// ByKeepAlive orders the results by the keep_alive field.
func ByKeepAlive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeepAlive, opts...).ToFunc()
}

// ByEndpoint orders the results by the endpoint field.
func ByEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndpoint, opts...).ToFunc()
}

// ByAllowedIps orders the results by the allowed_ips field.
func ByAllowedIps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowedIps, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
