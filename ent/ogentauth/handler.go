

// Code generated by ogent-auth, DO NOT EDIT.
package ogentauth

import (
  "context"

  "github.com/tiagoposse/connect/ent/ogent"

  sessions "github.com/tiagoposse/go-auth/sessions"
  authz "github.com/tiagoposse/go-auth/controller"
)

type IAuthTokenValidator interface {
  ValidateApiKeyAuth(context.Context, string) (authz.ISession, error)
  ValidateCookieAuth(context.Context, string) (authz.ISession, error)

  CreateSessionToken(ctx context.Context, item any) (string, error)
  ValidateSessionToken(ctx context.Context, token string) (authz.ISession, error)
}

type OgentAuthHandler struct {
  *authz.AuthzController
  IAuthTokenValidator
}

func NewOgentAuthHandler(val IAuthTokenValidator) (*OgentAuthHandler, error) {
	ctrl, err := authz.NewAuthzController(scopes)
	if err != nil {
		return nil, err
	}

  return &OgentAuthHandler{
    AuthzController: ctrl,
    IAuthTokenValidator: val,
  }, nil
}


func (h *OgentAuthHandler) HandleApiKeyAuth(c context.Context, operationName string, t ogent.ApiKeyAuth) (context.Context, error) {
  session, err := h.ValidateApiKeyAuth(c, t.APIKey)
	if err != nil {
		return c, err
	}

  if h.ValidateScopes(c, operationName, session.GetScopes()); err != nil {
    return c, nil
  }

	return context.WithValue(c, sessions.ContextSessionKey{}, session), nil
}

func (h *OgentAuthHandler) HandleCookieAuth(c context.Context, operationName string, t ogent.CookieAuth) (context.Context, error) {
  session, err := h.ValidateCookieAuth(c, t.APIKey)
	if err != nil {
		return c, err
	}

  if h.ValidateScopes(c, operationName, session.GetScopes()); err != nil {
    return c, nil
  }

	return context.WithValue(c, sessions.ContextSessionKey{}, session), nil
}


var scopes map[string]authz.Scopes = map[string]authz.Scopes{
  "createDevice": {
    "admin.*",
    "admin.groups.write",
  },
  "createGroup": {
    "admin.*",
    "admin.devices.write",
  },
  "deleteDevice": {
    "admin.*",
    "admin.groups.write",
  },
  "deleteGroup": {
    "admin.*",
    "admin.devices.write",
  },
  "googleAuthSync": {
    "admin.*",
    "admin.users.write",
  },
  "listDevice": {
    "admin.*",
    "admin.groups.write",
    "admin.groups.readonly",
  },
  "listGroup": {
    "admin.*",
    "admin.devices.write",
    "admin.devices.readonly",
  },
  "readDevice": {
    "admin.*",
    "admin.groups.write",
    "admin.groups.readonly",
  },
  "readGroup": {
    "admin.*",
    "admin.devices.write",
    "admin.devices.readonly",
  },
  "updateDevice": {
    "admin.*",
    "admin.groups.write",
  },
  "updateGroup": {
    "admin.*",
    "admin.devices.write",
  },
}
