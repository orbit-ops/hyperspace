

// Code generated by ogent-auth, DO NOT EDIT.
package ogentauth

import (
  "context"

  "github.com/tiagoposse/connect/ent/ogent"

  sessions "github.com/tiagoposse/go-auth/sessions"
  authz "github.com/tiagoposse/go-auth/controller"
)

type IAuthTokenValidator interface {
  ValidateApiKeyAuth(context.Context, string) (authz.ISession, error)
  ValidateCookieAuth(context.Context, string) (authz.ISession, error)

  CreateSessionToken(ctx context.Context, item any) (string, error)
  ValidateSessionToken(ctx context.Context, token string) (authz.ISession, error)
}

type OgentAuthHandler struct {
  *authz.AuthzController
  IAuthTokenValidator
}

func NewOgentAuthHandler(val IAuthTokenValidator) (*OgentAuthHandler, error) {
	ctrl, err := authz.NewAuthzController(scopes)
	if err != nil {
		return nil, err
	}

  return &OgentAuthHandler{
    AuthzController: ctrl,
    IAuthTokenValidator: val,
  }, nil
}


func (h *OgentAuthHandler) HandleApiKeyAuth(c context.Context, operationName string, t ogent.ApiKeyAuth) (context.Context, error) {
  session, err := h.ValidateApiKeyAuth(c, t.APIKey)
	if err != nil {
		return c, err
	}

  ctx := context.WithValue(c, sessions.ContextSessionKey{}, session)
  if h.ValidateScopes(ctx, operationName, session.GetScopes()); err != nil {
    return ctx, nil
  }

	return ctx, nil
}

func (h *OgentAuthHandler) HandleCookieAuth(c context.Context, operationName string, t ogent.CookieAuth) (context.Context, error) {
  session, err := h.ValidateCookieAuth(c, t.APIKey)
	if err != nil {
		return c, err
	}

  ctx := context.WithValue(c, sessions.ContextSessionKey{}, session)
  if h.ValidateScopes(ctx, operationName, session.GetScopes()); err != nil {
    return ctx, nil
  }

	return ctx, nil
}


var scopes map[string]authz.Scopes = map[string]authz.Scopes{
  "createApiKey": {
  },
  "createApiKeyuser": {
  },
  "createAudit": {
  },
  "createAudituser": {
  },
  "createDevice": {
    "admin.*",
    "admin.groups.write",
  },
  "createDeviceuser": {
  },
  "createGroup": {
    "admin.*",
    "admin.devices.write",
  },
  "createGroupusers": {
  },
  "createUser": {
  },
  "createUseraudit": {
  },
  "createUserdevices": {
  },
  "createUsergroup": {
  },
  "createUserkeys": {
  },
  "deleteApiKey": {
  },
  "deleteApiKeyuser": {
  },
  "deleteAudit": {
  },
  "deleteAudituser": {
  },
  "deleteDevice": {
    "admin.*",
    "admin.groups.write",
  },
  "deleteDeviceuser": {
  },
  "deleteGroup": {
    "admin.*",
    "admin.devices.write",
  },
  "deleteGroupusers": {
  },
  "deleteUser": {
  },
  "deleteUseraudit": {
  },
  "deleteUserdevices": {
  },
  "deleteUsergroup": {
  },
  "deleteUserkeys": {
  },
  "googleAuthSync": {
    "admin.*",
    "admin.users.write",
  },
  "listApiKey": {
  },
  "listApiKeyuser": {
  },
  "listAudit": {
  },
  "listAudituser": {
  },
  "listDevice": {
    "admin.*",
    "admin.groups.write",
    "admin.groups.readonly",
  },
  "listDeviceuser": {
  },
  "listGroup": {
    "admin.*",
    "admin.devices.write",
    "admin.devices.readonly",
  },
  "listGroupusers": {
  },
  "listUser": {
  },
  "listUseraudit": {
  },
  "listUserdevices": {
  },
  "listUsergroup": {
  },
  "listUserkeys": {
  },
  "readApiKey": {
  },
  "readApiKeyuser": {
  },
  "readAudit": {
  },
  "readAudituser": {
  },
  "readDevice": {
    "admin.*",
    "admin.groups.write",
    "admin.groups.readonly",
  },
  "readDeviceuser": {
  },
  "readGroup": {
    "admin.*",
    "admin.devices.write",
    "admin.devices.readonly",
  },
  "readGroupusers": {
  },
  "readUser": {
  },
  "readUseraudit": {
  },
  "readUserdevices": {
  },
  "readUsergroup": {
  },
  "readUserkeys": {
  },
  "updateApiKey": {
  },
  "updateApiKeyuser": {
  },
  "updateAudit": {
  },
  "updateAudituser": {
  },
  "updateDevice": {
    "admin.*",
    "admin.groups.write",
  },
  "updateDeviceuser": {
  },
  "updateGroup": {
    "admin.*",
    "admin.devices.write",
  },
  "updateGroupusers": {
  },
  "updateUser": {
  },
  "updateUseraudit": {
  },
  "updateUserdevices": {
  },
  "updateUsergroup": {
  },
  "updateUserkeys": {
  },
}
