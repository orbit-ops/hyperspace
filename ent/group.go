// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tiagoposse/connect/ent/group"
	"github.com/tiagoposse/connect/internal/types"
	"github.com/tiagoposse/go-auth/controller"
)

// Group is the model entity for the Group schema.
type Group struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes controller.Scopes `json:"scopes,omitempty"`
	// Cidr holds the value of the "cidr" field.
	Cidr types.Cidr `json:"cidr,omitempty"`
	// Rules holds the value of the "rules" field.
	Rules []types.Rule `json:"rules,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupQuery when eager-loading is set.
	Edges        GroupEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GroupEdges holds the relations/edges for other nodes in the graph.
type GroupEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	namedUsers  map[string][]*User
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Group) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case group.FieldRules:
			values[i] = new([]byte)
		case group.FieldScopes:
			values[i] = new(controller.Scopes)
		case group.FieldID:
			values[i] = new(sql.NullString)
		case group.FieldCidr:
			values[i] = new(types.Cidr)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Group fields.
func (gr *Group) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case group.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gr.ID = value.String
			}
		case group.FieldScopes:
			if value, ok := values[i].(*controller.Scopes); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil {
				gr.Scopes = *value
			}
		case group.FieldCidr:
			if value, ok := values[i].(*types.Cidr); !ok {
				return fmt.Errorf("unexpected type %T for field cidr", values[i])
			} else if value != nil {
				gr.Cidr = *value
			}
		case group.FieldRules:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rules", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gr.Rules); err != nil {
					return fmt.Errorf("unmarshal field rules: %w", err)
				}
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Group.
// This includes values selected through modifiers, order, etc.
func (gr *Group) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Group entity.
func (gr *Group) QueryUsers() *UserQuery {
	return NewGroupClient(gr.config).QueryUsers(gr)
}

// Update returns a builder for updating this Group.
// Note that you need to call Group.Unwrap() before calling this method if this Group
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Group) Update() *GroupUpdateOne {
	return NewGroupClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the Group entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Group) Unwrap() *Group {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Group is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Group) String() string {
	var builder strings.Builder
	builder.WriteString("Group(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", gr.Scopes))
	builder.WriteString(", ")
	builder.WriteString("cidr=")
	builder.WriteString(fmt.Sprintf("%v", gr.Cidr))
	builder.WriteString(", ")
	builder.WriteString("rules=")
	builder.WriteString(fmt.Sprintf("%v", gr.Rules))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedUsers(name string) ([]*User, error) {
	if gr.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedUsers(name string, edges ...*User) {
	if gr.Edges.namedUsers == nil {
		gr.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		gr.Edges.namedUsers[name] = []*User{}
	} else {
		gr.Edges.namedUsers[name] = append(gr.Edges.namedUsers[name], edges...)
	}
}

// Groups is a parsable slice of Group.
type Groups []*Group
