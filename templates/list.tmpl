{{ define "ogent/ogent/helper/list" }}{{/* gotype: entgo.io/ent/entc/gen.Type */}}
	q := h.client.{{ $.Name }}.Query(){{ with eagerLoad $ "list" }}{{ . }}{{ end }}
	{{- template "ogent/ogent/helper/list/pagination" $ -}}
	{{- if hasTemplate "ogent/ogent/helper/list/filter" }}{{ template "ogent/ogent/helper/list/filter" $ }}{{ end }}
	es, err := q.All(ctx)
	{{-
		template "ogent/ogent/helper/error"
		extend $
		"Errors" (list "not-found" "not-singular")
	-}}
  // Add Wiring
  if err := h.wires.List{{ $.Name }}Wire(ctx, es, params); err != nil {
    return &R500{
      Code: http.StatusInternalServerError,
      Status: http.StatusText(http.StatusConflict),
      Errors: rawError(err),
    }, nil
  }
	r := New{{ viewName $ "list" | plural }}(es)

  {{- if returnTotal $.Annotations $.Name }}
  countQuery, err := h.client.{{ $.Name }}.Query(){{ with eagerLoad $ "list" }}{{ . }}{{ end }}.Count(ctx)
  {{-
		template "ogent/ogent/helper/error"
		extend $
		"Errors" (list "not-found" "not-singular")
	-}}
	return &List{{ $.Name }}OKHeaders{Response: r, {{ pagination $.Annotations "total" }}: countQuery}, nil
  {{- else }}
	return (*List{{ $.Name }}OKApplicationJSON)(&r), nil
  {{- end }}
{{- end }}

{{ define "ogent/ogent/helper/list/sub" }}{{/* gotype: entgo.io/ent/entc/gen.typeScope */}}
	q := h.client.{{ $.Type.Name }}.Query().Where({{ $.Type.Package }}.IDEQ(params.{{ $.Type.ID.StructField }})){{- with eagerLoad $.Type "list" }}{{ . }}{{ end }}.Query{{ $.Scope.Edge.Name | pascal }}()

	{{- template "ogent/ogent/helper/list/pagination" $.Scope.Edge.Type -}}
	{{- if hasTemplate "ogent/ogent/helper/list/filter" }}{{ template "ogent/ogent/helper/list/filter" $.Scope.Edge.Type }}{{ end -}}
	es, err := q.All(ctx)
	{{-
		template "ogent/ogent/helper/error"
		extend $
		"Errors" (list "not-found" "not-singular")
	-}}
	r := New{{ replaceAll (edgeViewName $.Type $.Scope.Edge "list") "_" "" | plural }}(es)
  {{- if returnTotal $.Annotations $.Name }}
  countQuery, err := h.client.{{ $.Type.Name }}.Query().Where({{ $.Type.Package }}.IDEQ(params.{{ $.Type.ID.StructField }})).Query{{ $.Scope.Edge.Name | pascal }}().Count(ctx)
  {{-
		template "ogent/ogent/helper/error"
		extend $
		"Errors" (list "not-found" "not-singular")
	-}}

	return &List{{ $.Type.Name }}{{ $.Scope.Edge.Name | pascal }}OKHeaders{Response: r, {{ pagination $.Annotations "total" }}: countQuery}, nil
  {{- else }}
	return (*List{{ $.Type.Name }}{{ $.Scope.Edge.Name | pascal }}OKApplicationJSON)(&r), nil
  {{- end }}
{{ end }}

{{ define "ogent/ogent/helper/list/pagination" }}
	page := 1
	if v, ok := params.{{ pagination $.Annotations "page" }}.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.{{ pagination $.Annotations "itemsPerPage" }}.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)
{{ end }}
